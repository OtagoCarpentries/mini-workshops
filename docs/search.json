{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\nThis site is a collection of mini workshops that are designed to be 1-4 hours in length.\n\n\n\n",
      "last_modified": "2021-06-25T11:50:04+12:00"
    },
    {
      "path": "delvingdeeper.html",
      "title": "Delving Deeper into R",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": "https://github.com/murraycadzow"
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nData structures\nStructures\nAtomics\n\nFunctions\nLoops\n\nTime: 90 minutes\nDescription: This workshop will extend your understanding of R and cover how to interact with non-data.frame structured data such as vectors, matrices and lists. We’ll also look at creating your own functions and loops.\nLearning objectives:\ndata structures\nhomogenous structures\nvectors\nmatrix\n\nheterogenous structures\nlists\ndata.frame/tibble\n\n\ncreate functions\ncreate loops\ncreating/running scripts\nData structures\nHeavy reliance on content in http://adv-r.had.co.nz/Data-structures.html\nStructures\nHomogenous: vector, matrix, array Heterogenous: list, data.frame (tibble), data.table(?)\nstr\nclass\nattr\nlength\ndim\nAtomics\nnumeric\nlogical\ncharacter\n\nFunctions\n\n\nname <- function(variables) {\n  \n}\n\n\n\nLoops\n\n\nfor (variable in vector) {\n  \n}\n\n\n\n\n\n\n",
      "last_modified": "2021-06-25T11:50:05+12:00"
    },
    {
      "path": "githubwebsites.html",
      "title": "Creating Websites with GitHub",
      "description": "Create a website using GitHub Pages.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nTime: 120 min\nDescription: This workshop will introduce you to the world of using creating simple websites using the markdown language. A it will involve a practical application of version control principles which can be applied to other code as well.\nCreating up a github account Creating a repository Introduction to markdown syntax for formatting Creating a simple webpage with markdown Modifying pages and tracking changes How to use Github for collaboration\ncreate github account\nexample template: https://academicpages.github.io\n\n\n\n",
      "last_modified": "2021-06-25T11:50:05+12:00"
    },
    {
      "path": "index.html",
      "title": "Mini-Workshops",
      "description": "A collection of mini workshops\n",
      "author": [],
      "contents": "\nThis repository contains a collection of mini workshops that are designed to be 1-4 hours in length\nWorkshop sites can be found under the workshops menu and are available for:\nDelving deeper into R\nMore Tidyverse\nUseful code snippets for everyday tasks\nCreating websites with GitHub\nWorkflow Languages\n\n\n\n",
      "last_modified": "2021-06-25T11:50:05+12:00"
    },
    {
      "path": "moretidyverse.html",
      "title": "More Tidyverse",
      "description": "Take the time to explore the lesser known functions and packages of the Tidyverse\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nCore Tidyverse\ntibble\nggplot2\ndplyr\ntidyr\nforcats\nstringr\nreadr\npurrr\n\nExtra Tidyverse\n\nDescription: Take the time to explore the lesser known functions and packages of the Tidyverse. Learn about how to access googlesheets, use times/dates, manipulate text, use functional programming to replace loops, and more.\nLearning objectives\nWhat packages are in the tidyverse\nUnderstand functional programming\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. - https://www.tidyverse.org\n\nCore Tidyverse\n\n\nlibrary(tidyverse)\n\n\n── Attaching packages ───────────────────────────── tidyverse 1.3.1 ──\n✓ ggplot2 3.3.3     ✓ purrr   0.3.4\n✓ tibble  3.1.2     ✓ dplyr   1.0.6\n✓ tidyr   1.1.3     ✓ stringr 1.4.0\n✓ readr   1.4.0     ✓ forcats 0.5.1\n── Conflicts ──────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\ntibble\n\n\n\ntibble::tribble is a useful function if you want to manually input a small amount of data.\n\n\ntibble::tribble( ~column1, ~column2, ~column3,\n                 \"a\", 1, TRUE,\n                 \"b\", 2, FALSE)\n\n\n# A tibble: 2 x 3\n  column1 column2 column3\n  <chr>     <dbl> <lgl>  \n1 a             1 TRUE   \n2 b             2 FALSE  \n\ntibble::glimpse is similar to str but can be embedded in pipelines as it invisibly returns the original data.\n\n\ntibble::glimpse(mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\nggplot2\n\n\n\nThe majority of ggplot2 functions are specific to the type of visualisation that is being created and well covered by the cheatsheet. There are two however that can be very helpful to know about.\nggplot2::theme_set allows you to apply a theme to all of your ggplots. It would usually be called near the start of a script.\nggplot2::ggplot_build is the function that allows you pull out the data that is being used to create a plot. Each component of a ggplot is stored as an element of a list and\n\n\np <- ggplot(data = mtcars, aes(x = hp, y = mpg)) + geom_point() + geom_smooth(method = 'lm')\n\nplot(p)\n\n\n\n\n\n\nnames(ggplot2::ggplot_build(p))\n\n\n[1] \"data\"   \"layout\" \"plot\"  \n\nggplot2::ggplot_build(p)[[\"data\"]] %>% tibble::glimpse()\n\n\nList of 2\n $ :'data.frame':   32 obs. of  10 variables:\n  ..$ x     : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n  ..$ y     : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n  ..$ PANEL : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ group : int [1:32] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ...\n  .. ..- attr(*, \"n\")= int 1\n  ..$ shape : num [1:32] 19 19 19 19 19 19 19 19 19 19 ...\n  ..$ colour: chr [1:32] \"black\" \"black\" \"black\" \"black\" ...\n  ..$ size  : num [1:32] 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ...\n  ..$ fill  : logi [1:32] NA NA NA NA NA NA ...\n  ..$ alpha : logi [1:32] NA NA NA NA NA NA ...\n  ..$ stroke: num [1:32] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...\n $ :'data.frame':   80 obs. of  14 variables:\n  ..$ x          : num [1:80] 52 55.6 59.2 62.7 66.3 ...\n  ..$ y          : num [1:80] 26.6 26.3 26.1 25.8 25.6 ...\n  ..$ ymin       : num [1:80] 24.1 24 23.8 23.6 23.4 ...\n  ..$ ymax       : num [1:80] 29 28.6 28.3 28 27.7 ...\n  ..$ se         : num [1:80] 1.18 1.15 1.12 1.09 1.06 ...\n  ..$ flipped_aes: logi [1:80] FALSE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ PANEL      : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ group      : int [1:80] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ...\n  ..$ colour     : chr [1:80] \"#3366FF\" \"#3366FF\" \"#3366FF\" \"#3366FF\" ...\n  ..$ fill       : chr [1:80] \"grey60\" \"grey60\" \"grey60\" \"grey60\" ...\n  ..$ size       : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ linetype   : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ weight     : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ alpha      : num [1:80] 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 ...\n\ndplyr\n\n\n\ndplyr::transmute\ndplyr::relocate\ndplyr::across\ndplyr::starts_with/dplyr::contains/dplyr::ends_with\ndplyr::case_when\ntidyr\n\n\n\ntidyr::nest\ntidyr::unnest\ntidyr::separate/tidyr::separate_rows\ntidyr::unite\ntidyr::crossing\ntidyr::drop_na\ntidyr::replace_na\nforcats\n\n\n\n-forcats::relevel - forcats::reorder - forcats::recode\nstringr\n\n\n\nstringr::str_remove\nstringr::extract\nreadr\n\n\n\nreadr::read_csv_chunked\nreadr::parse_number is an extremely useful function to know about if you are reading data into R that you know is numerical in nature but might contain extra characters such as units.\n\n\ntext_to_parse <- c(\" 0.4m\", \"-6\", \"a5\", \"1E-2\", \"24%\", \"3e2\")\n\nreadr::parse_number(text_to_parse)\n\n\n[1]   0.40  -6.00   5.00   0.01  24.00 300.00\n\npurrr\n\n\n\npurrr::map\npurrr::walk\npurrr::transpose\npurrr::keep/purrr::discard/purrr::pluck\nExtra Tidyverse\nreadxl\ngooglesheets4\nlubridate\nlubridate::ymd\n\nhms\nmagrittr\nmagrittr::%$%\nmagrittr::%T%\n\nglue\nglue::glue\n\ndtplyr\ndbplyr\n\n\n\n",
      "last_modified": "2021-06-25T11:50:10+12:00"
    },
    {
      "path": "usefulcodesnippets.html",
      "title": "Useful code snippets for everyday tasks",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nR\nRMarkdown\nWorkflow advice\n\nBash\nConfiguration\n.bashrc or .zshrc\n\n\nPython\n\nTime: 90 min\nDescription: This session will cover useful code snippets that are designed to improve your overall experience doing computational research. This will include how to customise your BASH and R environments, useful keyboard short cuts, and short pieces of code to do common tasks e.g. read a directory of files into R.\nR\nRMarkdown\nIn rmd the code chunk eval option takes more than just TRUE or FALSE - if you want to selectively run lines within a rmd code chunk you can exclude them explicitly:\n```{r, eval = c(-1,-3)}\n1\n\n3\n\n5 # only this line will evaluate\n```\n\n\n## 1\n\n## 3\n\n5 # only this line will evaluate\n\n\n[1] 5\n\nWorkflow advice\nhere\njanitor\nusethis\nRprojects\nBash\nConfiguration\n.bashrc or .zshrc\nBASH is a common UNIX commandline or terminal, but for MacOS the default is zsh.\nTo find out which shell you are using enter this command:\necho $0\nCreating your .bashrc or .zsh\npath\nalias\nprompt\nssh config\ntmux\nPython\nVirtual environments - conda - conda create - conda activate - conda deactivate\n\n\n\n",
      "last_modified": "2021-06-25T11:50:10+12:00"
    },
    {
      "path": "workflowlanguages.html",
      "title": "Introduction to Workflow Languages",
      "description": "| An introduction to using Snakemake",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nWorkflow languages\nWhat is a workflow language\nRepoducible and Replicatible\n\nCommon workflow language\nNextFlow\nSnakemake\nExample snakemake workflow\n\n\nTime: 80 mins\nDescription: This workshop will introduce you to workflow language systems that are used for creating reproducible research workflows. This workshop will use Snakemake as the example\nLearning objectives\nUnderstand principles behind computational reproducibility\nUnderstand the components of a Snakefile: rules, inputs, outputs, and actions\nWrite a simple Snakefile\nRun Snakemake from the shell\nUse Snakemake wildcards to simplify our rules\nWorkflow languages\nWhat is a workflow language\nWorkflows describe the series of steps that need to be performed in order to accomplish a task. A workflow language provides a syntax for us to describe a process and how it relates to other processes.\nRepoducible and Replicatible\n\n\n\n\n\n\nReproducibility is a strong focus for research. There are varying levels of reproducibility in computational terms, and much of it can be thought of in terms relating to time or location and what differences occur in environment when then change.\nCan I re-run my analysis now on my computer.\nCan I re-run my analysis in the future on my computer?\nCan you re-run my analysis now on your computer?\nDoes my software match yours?\n\nCan you re-run my analysis in the future?\nHas the software changed since the last time it was run?\n\nWhat aspects of the analysis are not affected by change in environment\nWhat are the steps in the analysis?\nIs the program the same version?\nIs the environment the program is run in the same? (think operating system)\nThere are different solutions for each level or the reproducibility problem and each adds an extra level of overhead\nCommon workflow language\n\nThe Common Workflow Language (CWL) is a standard for describing computational data-analysis workflows. Development of CWL is focused particularly on serving the data-intensive sciences, such as Bioinformatics, Medical Imaging, Astronomy, Physics, and Chemistry. A key goal of the CWL is to allow the creation of a workflow that is portable and thus may be run reproducibly in different computational environments. https://en.wikipedia.org/wiki/Common_Workflow_Language\n\nNextFlow\n\nNextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages. https://www.nextflow.io\n\nSnakemake\n\nThe Snakemake workflow management system is a tool to create reproducible and scalable data analyses. Workflows are described via a human readable, Python based language. They can be seamlessly scaled to server, cluster, grid and cloud environments, without the need to modify the workflow definition. Finally, Snakemake workflows can entail a description of required software, which will be automatically deployed to any execution environment. https://snakemake.readthedocs.io/en/stable/\n\nExample snakemake workflow\nWe’ll now work through the following lessons from this workshop https://carpentries-incubator.github.io/workflows-snakemake/index.html\nSetup\nManual Data Processing workflow\nSnakefiles\nWildcards\n\n\n\n",
      "last_modified": "2021-06-25T11:50:11+12:00"
    }
  ],
  "collections": []
}

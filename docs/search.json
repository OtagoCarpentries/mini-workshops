{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\nThis site is a collection of mini workshops that are designed to be 1-4 hours in length.\n\n\n\n",
      "last_modified": "2021-07-03T21:57:31+12:00"
    },
    {
      "path": "debuggingtips.html",
      "title": "Debugging/Troubleshooting Tips and Tricks",
      "description": "Help for when things don't turn out how you expect.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": "https://github.com/murraycadzow"
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nWhere do I start?\nAsking for help\nAutomated testing\n\n\nTime: 50 min\nDescription: This session will provide you with advice and skills on how to start tackling error messages and where to look for help.\nErrors messages are common when coding and are a way the computer communicates it doesn’t understand what the instructions it has been given are.\nWhere do I start?\n\nFinding your bug is a process of confirming the many things that you believe are true — until you find one which is not true. —Norm Matloff\n\nMy general process focuses on the initial source of the error and then starts to work backwards in command history.\nDo I recognise the message?\nRe-look at the command I ran looking for\ntypos\nmissing syntax (e.g. brackets, semicolons, etc.)\ncorrect naming of things\n\nIs the input for my command what I expect it is?\nDid the previous command run properly?\nif not jump to 1. for the previous command\n\nLets look at a few common R errors\n\n\nmy_var\n\n\nError in eval(expr, envir, enclos): object 'my_var' not found\n\nmean[2]\n\n\nError in mean[2]: object of type 'closure' is not subsettable\n\na <- c(one = 1,two = 2, three = 3)\na$one\n\n\nError in a$one: $ operator is invalid for atomic vectors\n\na[[20]]\n\n\nError in a[[20]]: subscript out of bounds\n\nread.csv(\"myfile.csv\")\n\n\nWarning in file(file, \"rt\"): cannot open file 'myfile.csv': No such\nfile or directory\nError in file(file, \"rt\"): cannot open the connection\n\nggplot()\n\n\nError in ggplot(): could not find function \"ggplot\"\n\nnotapackage::notafunction()\n\n\nError in loadNamespace(x): there is no package called 'notapackage'\n\nif(NA){\n  print(\"was NA\")\n}\n\n\nError in if (NA) {: missing value where TRUE/FALSE needed\n\nAnd examples of warnings\n\n\nif(c(3 > c(1,2,3))){\n  print(\"less than three\")\n}\n\n\nWarning in if (c(3 > c(1, 2, 3))) {: the condition has length > 1 and\nonly the first element will be used\n[1] \"less than three\"\n\nif(c(1,2,3) > 3){\n  print(\"less than one\")\n}\n\n\nWarning in if (c(1, 2, 3) > 3) {: the condition has length > 1 and\nonly the first element will be used\n\nmean(c(\"1\", \"2\"))\n\n\nWarning in mean.default(c(\"1\", \"2\")): argument is not numeric or\nlogical: returning NA\n[1] NA\n\nAsking for help\neffective googling\nReproducible example\nAutomated testing\nAs you code and manually test, it can be beneficial to formalise the manual tests into an automated solution so that you can be more efficient and also ensure that you know when you ‘break things’ with future changes. This is particularly useful when you fix bugs in your code, create a test that replicates the condition that caused the bug.\nIn R one system uses the package testthat which provides a framework to create these formal tests which will evaluate a piece of code against the known expected output and tell you if they don’t match.\n\n\n# expect a mean of 2\ntestthat::expect_equal(mean(c(1,2,3)), 2)\n\n\n\n\n\n\n",
      "last_modified": "2021-07-03T21:57:33+12:00"
    },
    {
      "path": "delvingdeeper.html",
      "title": "Delving Deeper into R",
      "description": "A deeper look into topics that get skipped.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": "https://github.com/murraycadzow"
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "2021-07-05",
      "contents": "\n\nContents\nAtomics\nEmpty vectors\nCoercion\nExercise\n\nData structures\nStructures\nSubsetting\n\nFunctions\nIteration\nThe for Loop\nfor loop with indices\nNesting of loops\n\nRunning Scripts\n\nTime: 90 minutes\n30 data structures\n30 functions\n30 loops\nDescription: This workshop will extend your understanding of R and cover how to interact with non-data.frame structured data such as vectors, matrices and lists. We’ll also look at creating your own functions and loops.\nLearning objectives:\nUnderstand the creation and subsetting of specific data structures\nUnderstand how to create functions\nUnderstand how to create loops\nUnderstand how to create and run an script\nThis workshop will follow an explaination then try for yourself using exercises format\nMotivation: Many frustrations of dealing with R stem from not understanding how R is working ‘under-the-hood’. We want to explain some of the details that get skipped as part of introductory courses so that you understand what is going on and how to delve into some of the oddities. We also want to show you how to start being able to implement solutions in R to tackle your specific problems.\nAtomics\nThis chapter is useful for additional information: https://adv-r.hadley.nz/vectors-chap.html\n4 main types of atomic vectors\ndouble\ninteger\nlogical\ncharacter\nDouble and integer are collectively known as numeric vectors.\nUsing c() to combine. c() is used to combine atomic vectors together, and when the arguments are all atomic vectors it flattens the structure\n\n\nchr_vec <- c(\"a\", \"b\")\nchr_vec\n\n\n[1] \"a\" \"b\"\n\nc(chr_vec, c(chr_vec, chr_vec))\n\n\n[1] \"a\" \"b\" \"a\" \"b\" \"a\" \"b\"\n\nWe can use typeof to find out the atomic type of our vectors\n\n\ntypeof(chr_vec)\n\n\n[1] \"character\"\n\nEmpty vectors\nWe can create empty vectors of specific lengths using the atomic types\n\n\ndouble(length = 2)\n\n\n[1] 0 0\n\nnumeric(length = 3)\n\n\n[1] 0 0 0\n\ncharacter(3)\n\n\n[1] \"\" \"\" \"\"\n\nlogical(2)\n\n\n[1] FALSE FALSE\n\ndouble(0)\n\n\nnumeric(0)\n\nCoercion\nAll elements of an atomic vector must be the same type, so when you attempt to combine different types they will be coerced to the most flexible type. Types from least to most flexible are: logical -> integer -> double -> character.\nWe can explicitly use coercion on vectors with the as.numeric, as.character, and as.logical functions.\nExercise\nCreate the following vectors:\nfour numbers as a numeric called my_nums\nsix words of your choice as a character called my_words\nan empty numeric vector of length 7 called num_results.\nan empty character vector of length 3 called char_results.\ncombine the my_nums and my_words vectors into a single vector called nums_words\nwhat type is this new vector?\nWhat do you notice are the values in the empty numeric and character vectors?\nData structures\nThis section is complimented by http://adv-r.had.co.nz/Data-structures.html for a more in depth understanding and explanation.\nStructures\nIn R there are two types of data structure, one for the storage of homogenous data i.e. the data has to be all of the same type such as numeric. The other is for the storage of heterogenous data i.e. the data can be of different types.\nThe main structures for homogenous data are the 1 dimensional vector, and the 2d matrix. Fo a matrix it has the requirement to have either all columns of equal length, and all rows of equal length.\n\n\nexample_vector <- c(1,2,5,6)\nexample_vector\n\n\n[1] 1 2 5 6\n\nexample_matrix <- matrix(c(1:10), nrow = 2, byrow = TRUE)\nexample_matrix\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n\nThe main heterogenous structures are the list and the data.frame (and tibble). A list is a series of elements and each can be of different data types and dimensions. It is a very versatile structure. A data.frame is a list of variables, with the same number of rows. Character vectors are converted to factors (from R v4+ this is no longer the default behaviour). A tibble is a special type of data.frame with a priority on printing and inspection and comes from the tibble package which is part of the tidyverse.\n\n\nexample_list <- list(1:3, \"a\", c(TRUE, FALSE, TRUE), c(2.3, 5.9))\nexample_list\n\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE\n\n[[4]]\n[1] 2.3 5.9\n\nexample_df <- data.frame(col1 = c(\"a\", \"b\", \"c\"), \n                         col2 = c(1, 2, 3), \n                         col3 = c(TRUE, FALSE, FALSE) )\nexample_df\n\n\n  col1 col2  col3\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3 FALSE\n\nexample_tib <- tibble::tibble(col1 = c(\"a\", \"b\", \"c\"), \n                              col2 = c(1, 2, 3),\n                              col3 = c(TRUE, FALSE, FALSE) )\nexample_tib\n\n\n# A tibble: 3 x 3\n  col1   col2 col3 \n  <chr> <dbl> <lgl>\n1 a         1 TRUE \n2 b         2 FALSE\n3 c         3 FALSE\n\nstr\nclass\nattributes\ntypeof\nlength\ndim\n\n\nitems <- c(\"fork\" = 5, \"table\" = 1,\"knife\" = 6,\"spoon\" = 4)\nnames(items)\n\nattributes(items)\n\n\nattributes(mtcars)\n\n\n\nSubsetting\nhttp://adv-r.had.co.nz/Subsetting.html\nSubsetting operators:\n[ versus [[ versus $\n[\nThere are two main methods of subsetting in R, the first is by specifying the numbered positions (index) from the data structure we have. The second is by providing a logical vector - usually created through a conditional statement.\nConditional\nThese statements rely on a test (condition/comparison) that results in a boolean (TRUE/FALSE) to determine what gets subsetted (or in the context of functions, run). Boolean logic operators can be used in to modify or combine tests to result in a single TRUE or FALSE.\nBoolean Operation\nSymbol in R\nNOT\n!\nOR\n|\nAND\n&\nThese can be combined with the comparison operators (==, !=, <, <=, >, >=) to combine statements together into more complex logic statements. The result of the NOT, AND, and OR can be seen in the below logic table:\nStatement\nBecomes\n\n\n!TRUE\nFALSE\n\n\n!FALSE\nTRUE\n\n\nTRUE & TRUE\nTRUE\n\n\nTRUE & FALSE\nFALSE\n\n\nFALSE & TRUE\nFALSE\n\n\nFALSE & FALSE\nFALSE\n\n\nTRUE | TRUE\nTRUE\n\n\nTRUE | FALSE\nTRUE\n\n\nFALSE | TRUE\nTRUE\n\n\nFALSE | FALSE\nFALSE\n\n\nFor subsetting the final logical vector tells R which items to pull out - the positions that are TRUE. This logical vector needs to either be the same length as the vector being subsetted, or a factor of the length (so the vector can be ‘recycled’).\n\n\nmy_vec <- c(\"cat\",\"dog\",\"mouse\", \"horse\")\n\n# pull out the first and last elements\nmy_vec[c(TRUE, FALSE, FALSE, TRUE)]\n\n\n[1] \"cat\"   \"horse\"\n\n# pull out the \"odd\" elements\nmy_vec[c(TRUE, FALSE)]\n\n\n[1] \"cat\"   \"mouse\"\n\nPositional/Index\nThe element positions/indexes can be used to perform subsetting. The indexes in R start from 1, unlike many other programming languages.\nA negative in-front of the index means to remove that entry but you can’t mix negative and positive indexes in the same command.\nThe index zero returns a zero length vector of the vector atomic type. Using an empty [] will return the entire vector. Specifying an index multiple times will duplicate the element.\n\n\nmy_vec\n\n\n[1] \"cat\"   \"dog\"   \"mouse\" \"horse\"\n\nmy_vec[1]\n\n\n[1] \"cat\"\n\nmy_vec[-1]\n\n\n[1] \"dog\"   \"mouse\" \"horse\"\n\nmy_vec[c(-2, -4)]\n\n\n[1] \"cat\"   \"mouse\"\n\nmy_vec[c(4,4,4)]\n\n\n[1] \"horse\" \"horse\" \"horse\"\n\nmy_vec[0]\n\n\ncharacter(0)\n\nmy_vec[]\n\n\n[1] \"cat\"   \"dog\"   \"mouse\" \"horse\"\n\n`[`(my_vec, 3)\n\n\n[1] \"mouse\"\n\n\n\nexample_list\n\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE\n\n[[4]]\n[1] 2.3 5.9\n\nexample_list[[c(1,2)]]\n\n\n[1] 2\n\nexample_list[c(1,2)]\n\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"a\"\n\nExercises\nFunctions\nA function in R is comprised of four parts:\na name\ninputs (arguments/variables)\nthe body (the code that does something)\noutput (what gets returned after the body has run)\nAs you have been using R you will have noticed that many tasks have a particular function already available for you to use, such as mean or sd. In this section we are going to learn how to make our own functions. We can define our own functions using the function() function. Inside the parenthesis we define what variables are going to be passed to our function and curly braces contain the body of the function. If we want to return a value from our function R will automatically return the result of the last line of the function body or we end can do so explicitly with return(). We can assign this new function to a variable so that we call on it later, it is possible to have an anonymous function but these are usually found as part of map or the apply family but we won’t be covering anonymous functions in this workshop. To call our new function we now use the variable name and pass any required arguments.\nHere is an example of how to create a function:\n\n\nname <- function(variables) {\n  \n}\n\n\n\nNB: in RStudio you can get a code snippet/template by typing “fun” and hitting <tab>\nHere is an example function that will double the value of the provided number:\n\n\n# Doubles the provided number\ndouble <- function( num ){\n  num * 2\n}\n\ndouble(2)\n\n\n[1] 4\n\nImportant: Functions don’t auto-update when you modify the code that creates them, you must re-run the entire function code block.\nWe can also have multiple arguments for our functions:\n\n\n# Calculates BMI on a supplied height (m) and weight (kg)\ncalcBMI <- function(height, weight){\n  weight / height ^ 2\n}\n\n\ncalcBMI(height = 1.68, weight = 73)\n\n\n[1] 25.86451\n\nNB: Variables declared only inside a function don’t exist outside of the function – see the Scope section.\nIteration\nWhat is the point of learning about iteration? Similar to the reasons to create functions, iteration provides us a tool to be able to do repetitive tasks without having to copy and paste a lot of code. Take for instance the following example code that would read in csv files for a given country and then calculate the mean GDP for each:\n\n\ndata_nzl <- read_csv(\"gapminder_countries/nzl.csv\")\ndata_aus <- read_csv(\"gapminder_countries/aus.csv\")\ndata_usa <- read_csv(\"gapminder_countries/usa.csv\")\n\n# calculate the mean gdp from each country\nmean(data_nzl$gdp)\nmean(data_aus$gdp)\nmean(data_usa$gsp)\n\n\n\nNotice that there is a lot of code duplication (read_csv, and mean are duplicated for each country). In this example there is also the inclusion of a typo which is a very common mistake to make when changing inputs after copy and pasting - did you spot it? What happens if we need include another 20 or 100 countries? What happens if we also needed to calculate the median GDP for each? It quickly becomes quite laborious to scale. This is where iteration is useful, as it is all about providing a mechanism to specify how to repeat things.\nIn an abstract form, the above example could be captured like this:\n1. make a list of all the csv files\n2. for each csv file in the list:\n    - calculate the mean of the gdp column\nThis abstraction of the problem now gives us the steps to follow and deals with the heart of the problem rather than having to worry about a specific implementation.\nThe for Loop\nPalmer Penguins Dataset\nWe are going to use the Palmer Penguins dataset with our for loops. A set of Phenotypes from 3 Species and 3 Islands put together by Alison Horst\n\n\nif (!require(\"palmerpenguins\")) install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\n\n\nfor loops usually contain the following parts:\nan output - somewhere to store the results from the loop\nan input set of items to do something to (a vector)\nloop body - code that will do something for a single value of the set.\nThe most common loop is the for loop. The template is as follows:\n\n\nfor (variable in vector) {\n  # loop body i.e. what to do each time\n}\n\n\n\nNB: You can get the for loop code snippet in RStudio by typing for then hitting <tab> and selecting “for {snippet}” from the drop down.\nWhen you see a for loop you can read it like a sentence: for each thing in my collection of things; I will do something to first thing; and then choose the next thing, do something, and repeat, until I have done something to each of my things in my collection.\nWe’ll compare this snippet to the following example which will print out the numbers 1 to 3 to explain what is going on.\n\n\nfor( num in 1:3 ){\n  print( num )\n}\n\n\n[1] 1\n[1] 2\n[1] 3\n\nIn this example, we wanted to print out each item from our set. Our set was a vector of numbers 1 to 3 in this case (in R a vector with a range of numbers can be made using the : operator in the format start:end). The task that we will do repetitively is print – our loop body. num is going to store the value of the current item. Our vector or collection is the numbers 1 to 3.\nThe loop gets run as such:\nnum takes on the first value from our set (1)\nthe loop body runs (prints the value of num which is 1)\nthere is nothing more to be done in the body so it moves onto the next item\nnum takes on the second value from the set (2)\nthe loop body runs (prints the value of num which is 2)\nthere is nothing more to be done in the body so it moves to the next item\nnum takes on the third value from out set (3)\nthe loop body runs (prints the value of num which is 3)\nthere is nothing more to be done in the body so it moves to the next item\nthere is not a next item so the loop exits.\nThis is how we could have achieved this task without a loop:\n\n\nprint(1)\n\n\n[1] 1\n\nprint(2)\n\n\n[1] 2\n\nprint(3)\n\n\n[1] 3\n\nThe duplication is apparent but not particularly laborious in this case. However, think about how this would scale. What if suddenly you needed to print the numbers 1 to 100, or 1000, or 10000? Using the copy-paste print() and manually filling in numbers is going to be pretty laborious and highly risky of typos. Using the for loop however, scales extremely easily and would be a matter of only changing what our collection of items going in was, everything else remains the same:\n\n\nfor( num in 1:10000 ){\n  print( num )\n}\n\n\n\nExercise\nPrint out the Column Names of the Penguins Dataset, 1 at a time.\n\n\n\nfor loop with indices\nOne version of the for loop that you might encounter (especially in other languages) is a version that uses indices to determine the current item from the set. In this case rather than the loop variable using the values of the items themselves, it uses the index of the item in the collection. Traditionally the loop variable is called i in this situation. While you could specify the indices manually through a vector e.g. 1:5, or 1:length(myvector), this can lead to some issues and the safer way is for R to generate the indices using seq_along() which returns a vector with all the indexes of your object.\n\n\nmyNumbers <- c(11,13,15,17,19)\n\n# show example of what seq_along() is providing\nseq_along(myNumbers)\n\n\n[1] 1 2 3 4 5\n\n# print each number and the index used from the collection by using the index to subset\nfor( i in seq_along(myNumbers) ){\n  print(paste(\"number =\", myNumbers[i], \"index (i) =\", i))\n}\n\n\n[1] \"number = 11 index (i) = 1\"\n[1] \"number = 13 index (i) = 2\"\n[1] \"number = 15 index (i) = 3\"\n[1] \"number = 17 index (i) = 4\"\n[1] \"number = 19 index (i) = 5\"\n\nExercise\nUsing indices, caluclate the mean of the 2nd, 3rd and 5th Columns\n\n\n\nNesting of loops\nIt’s generally recommended to avoid the nesting of loops within other loops. Let’s say the outer loop has a total of n iterations to get through and an inner loop has m. Every time we add one extra iteration of the outer loop we end up adding an extra m iterations of the inner loop, so the total number of iterations is n * m. Depending on how big m is, this could be adding thousands or millions of extra iterations, causing your code to take longer to run. Some times however, nesting is unavoidable but it’s a good idea to keep an eye out for nesting if your code is taking a while to run as this is usually the first place things can be sped up.\nRunning Scripts\n\n\n\n",
      "last_modified": "2021-07-03T21:57:36+12:00"
    },
    {
      "path": "githubwebsites.html",
      "title": "Creating Websites with GitHub",
      "description": "Create a website using GitHub Pages.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "2021-07-06",
      "contents": "\n\nContents\nWebsites with GitHub\nCreating a GitHub Account\nWebsite Repository\nCustomising\nMarkdown\n\nCreate a website from a template\nCustomising\n\n\n\nTime: 120 min\nDescription: This workshop will introduce you to the world of using creating simple websites using the markdown language. A it will involve a practical application of version control principles which can be applied to other code as well.\nCreating up a github account Creating a repository Introduction to markdown syntax for formatting Creating a simple webpage with markdown Modifying pages and tracking changes How to use Github for collaboration\nWebsites with GitHub\nGit is a piece of software that manages version control (like track changes in Word) of code in projects known as repositories. GitHub is a website that is used to host these repositories but it also does much more and provides some automation of compiling code - one of these automations was designed to compile web-based languages into websites that could be used to communicate about your repositories. In this workshop, we’re going to leverage this automated process from what is known as GitHub Pages in order to create simple websites.\nFor this workshop, we’re going to create two websites, the first is a “sandpit” where we’ll introduce how to get a website up and running from scratch. The second, we’ll use an existing template for an academic CV that you can then customise.\nCreating a GitHub Account\nIn order to use GitHub, we need to create an account for ourselves.\nOpen up your web browser and go to https://github.com\n\n\n\nSign up a GitHub account\nSign in to your GitHub account\nNow that we’re set up with an account, we can start creating our first website\nWebsite Repository\nFirst we need to create the repository (project) where the code for our website is going to live.\nClick on the Plus icon in the top left\n\n\n\nSelect New Repository\nFill in the details\nChoose a name for your repository - this will end up as part of the url for your website: e.g. my-test-website for me would end up as https://murraycadzow.github.io/my-test-website\nSelect Public\nCheck Add a README file\n\nClick Create Repository\n\n\n\nCreate your site\n\n\n\nClick the Settings menu (near top right next to the cog)\nThen click on the Pages link from the left-hand Options menu\n\n\n\nCurrently GitHub Pages is disabled so we need to change the source from None to main.\n\n\n\nLeave it set to / (root) and click Save. This means that GitHub will take our files we write in markdown and convert them to HTML for us.\nGitHub will also tell you the URL that the website is now being published to\n\n\n\nCustomising\nNext we’ll pick a theme for our website.\nClick the Choose a theme button and then browse through the themes in the gallery and select one you like with the Select theme button.\nYou’ll then be put in to editing your README.md file which now contains a template text explaining some of the markdown syntax (which we’re about to cover next).\nScroll to the bottom and click the green Commit changes button\nNow click on your repository name at the top left to come back to seeing the contents of your repository\n\n\n\nYou’ll see two files, the first is the README.md which is being displayed, and the second is a file _config.yml which contains the configuration information for your website. So far the only configuration is the choice of theme.\nI chose the slate theme and now my website looks like this\n\n\n\nMarkdown\nGitHub Pages is an automatic system that will convert files written in markdown (commonly with a .md file extension) into HTML webpages. Markdown itself is a simplified text based syntax used for styling of writing.\nTake a look at the contents of the README.md to see some of the syntax we can use to style the text of our website.\nCreate a website from a template\nexample template: https://academicpages.github.io\nCustomising\n\n\n\n",
      "last_modified": "2021-07-03T21:57:37+12:00"
    },
    {
      "path": "index.html",
      "title": "Mini-Workshops",
      "description": "A collection of mini workshops\n",
      "author": [],
      "contents": "\nThis repository contains a collection of mini workshops that are designed to be 1-4 hours in length\nWorkshop sites can be found under the workshops menu and are available for:\nDelving deeper into R\nMore Tidyverse\nUseful code snippets for everyday tasks\nCreating websites with GitHub\nWorkflow Languages\nDebugging/Troubleshooting Tips and Tricks\n\n\n\n",
      "last_modified": "2021-07-03T21:57:38+12:00"
    },
    {
      "path": "LICENSE.html",
      "author": [],
      "contents": "\nMIT License\nCopyright (c) 2021 mini-workshops authors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n",
      "last_modified": "2021-07-03T21:57:38+12:00"
    },
    {
      "path": "moretidyverse.html",
      "title": "More Tidyverse",
      "description": "Take the time to explore the lesser known functions and packages of the Tidyverse\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "2021-07-05",
      "contents": "\n\nContents\nCore Tidyverse\ntibble\ndplyr\ntidyr\nstringr\nreadr\nggplot2\nforcats\npurrr\n\nExtra Tidyverse\n\nTime: 90 min\nDescription: Take the time to explore the lesser known functions and packages of the Tidyverse. Learn about how to access googlesheets, use times/dates, manipulate text, use functional programming to replace loops, and more.\nLearning objectives\nWhat packages are in the tidyverse\nUnderstand functional programming\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. - https://www.tidyverse.org\n\nhttps://rstudio-education.github.io/tidyverse-cookbook/index.html\nCore Tidyverse\n\n\nlibrary(tidyverse)\n\n\n── Attaching packages ───────────────────────────── tidyverse 1.3.1 ──\n✓ ggplot2 3.3.3     ✓ purrr   0.3.4\n✓ tibble  3.1.2     ✓ dplyr   1.0.6\n✓ tidyr   1.1.3     ✓ stringr 1.4.0\n✓ readr   1.4.0     ✓ forcats 0.5.1\n── Conflicts ──────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\ntibble\n\n\n\ntibble::tribble is a useful function if you want to manually input a small amount of data.\n\n\ntibble::tribble( ~column1, ~column2, ~column3,\n                 \"a\", 1, TRUE,\n                 \"b\", 2, FALSE)\n\n\n# A tibble: 2 x 3\n  column1 column2 column3\n  <chr>     <dbl> <lgl>  \n1 a             1 TRUE   \n2 b             2 FALSE  \n\ntibble::glimpse is similar to str but can be embedded in pipelines as it invisibly returns the original data.\n\n\ntibble::glimpse(mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\nExercise\nUse tribble() to manually input some data\ndplyr\n\n\n\ndplyr::rename provides the renaming ability of dplyr::select but it doesn’t subset.\ndplyr::transmute is similar to dplyr::mutate except only columns specified are kept.\ndplyr::starts_with/dplyr::contains/dplyr::ends_with are useful helper functions to enable easy selection of columns.\ndplyr::relocate is a very useful function that enables you to relocate columns to specific locations. It uses a .before or .after argument to specify where you to more the column(s) to.\ndplyr::across lets you apply a function or functions across multiple columns. This is usually used in conjunction with dplyr::summarise or dplyr::mutate.\ndplyr::c_across lets you combine values from across multiple columns, such as performing a summarising function on select columns.\ndplyr::case_when is useful in situations where you would have multiple ifelses.\nExercise\ntidyr\n\n\n\ntidyr::nest will for per row, condense the specified columns into a list, which is stored in a single column (list column). tidyr::unnest will take the elements from a list column into their own columns. These functions are particularly useful in conjunction with pivot_longer/pivot_wider\ntidyr::unite/tidyr::separate will either combine columns with a separator, or split to new columns based on a separator. tidyr::separate_rows will separate a column based on a separator but into separate rows, duplicating the related row data with it.\ntidyr::crossing provides a mechanism to create all permutations by ‘crossing’ the values in two vectors. This is particularly useful when combined with purrr for running a function on all sub-groups within your data.\ntidyr::drop_na is function that provides a way to remove rows that contain missing data. If a column(s) is specified rows are only removed if the missing data is in the specific columns.\ntidyr::replace_na is a function that lets you specify replacement values for your missing values. The values are specified using a named list, with the names corresponding to the columns your want to replace the data in.\nExercise\nCreate a data.frame/tibble from the starwars dataset which shows one character/film combo per row for all the films and characters.\n\n\n# starwars dataset\ndplyr::starwars\n\n\n\nstringr\n\n\n\nstringr::str_detect\nstringr::str_remove\nstringr::str_extract\nExercise\nreadr\n\n\n\nreadr::read_csv_chunked\nreadr::parse_number is an extremely useful function to know about if you are reading data into R that you know is numerical in nature but might contain extra characters such as units.\n\n\ntext_to_parse <- c(\" 0.4m\", \"-6\", \"a5\", \"1E-2\", \"24%\", \"3e2\")\n\nreadr::parse_number(text_to_parse)\n\n\n[1]   0.40  -6.00   5.00   0.01  24.00 300.00\n\nExercise\nggplot2\n\n\n\nThe majority of ggplot2 functions are specific to the type of visualisation that is being created and well covered by the cheatsheet. There is one however that can be very helpful to know about.\nggplot2::theme_set allows you to apply a theme to all of your ggplots. It would usually be called near the start of a script.\n\n\n# Set the theme to theme_bw for all following plots\nggplot2::theme_set(theme_bw())\n\n\n\nforcats\n\n\n\nforcats::reorder lets you reorder your factor levels by sorting against another variable. forcats::reorder2 is the same as reorder but you can use two variables. The default function for sorting is based on the median.\n\n\ndf <- tibble::tribble(\n  ~color,     ~a, ~b,\n  \"blue\",      1,  2,\n  \"green\",     6,  2,\n  \"purple\",    3,  3,\n  \"red\",       2,  3,\n  \"yellow\",    5,  1\n)\ndf$color <- factor(df$color)\nfct_reorder(df$color, df$a, min)\n\n\n[1] blue   green  purple red    yellow\nLevels: blue red purple yellow green\n\nfct_reorder2(df$color, df$a, df$b)\n\n\n[1] blue   green  purple red    yellow\nLevels: purple red blue green yellow\n\nforcats::infreq will reorder the factor levels based on the frequency of the observations (highest first), and forcats::fct_rev will reverse that order (lowest first).\nforcats::relevel lets you manually reorder the levels in your factor. This is useful for when you want to move a particular level such as NA to the end.\n\n\nmy_fct <- factor(c(\"blue\",\"green\",\"blue\", \"none\", \"blue\", \"purple\", \"purple\"))\nmy_fct\n\n\n[1] blue   green  blue   none   blue   purple purple\nLevels: blue green none purple\n\nfct_relevel(my_fct, \"none\")\n\n\n[1] blue   green  blue   none   blue   purple purple\nLevels: none blue green purple\n\n# send to the end\nfct_relevel(my_fct, \"none\", after = Inf)\n\n\n[1] blue   green  blue   none   blue   purple purple\nLevels: blue green purple none\n\nExercise\nAlter the following code that creates a bar plot to use forcats to re-order the bars the species of penguins are ordered by frequency, lowest on the left.\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins %>% \n  ggplot(aes(x = species)) + geom_bar()\n\n\n\npurrr\n\n\n\npurrr::map\npurrr::walk\npurrr::transpose\npurrr::keep/purrr::discard/purrr::pluck\nExercise\nExtra Tidyverse\ngooglesheets4\n\n\nlibrary(googlesheets4)\n\n# grab the url from the browser for your sheet\nurl <- \"https://docs.google.com/spreadsheets/d/1MbE2_XUfQ9KwfKAJhEDPb6KgOg2EaoXr5IN2F-hjBNI/edit#gid=0\"\n\n# read the sheet in\nmy_google_sheet <- read_sheet(url)\n\n\n\nThe first time running read_sheet you will be asked to authenticate and a web broswer will open up.\nreadxl\nlubridate\nlubridate::ymd\n\nhms\nmagrittr\nmagrittr::%$%\nmagrittr::%T%\n\nglue\nglue::glue\n\ndtplyr\ndbplyr\n\n\n\n",
      "last_modified": "2021-07-03T21:57:44+12:00"
    },
    {
      "path": "usefulcodesnippets.html",
      "title": "Useful code snippets for everyday tasks",
      "description": "Helpful bits of code for life\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "2021-07-07",
      "contents": "\n\nContents\nR\nIncreasing Efficiency\nRprofile\n\nRMarkdown\nStandard template:\nRmarkdown tricks\nMaking better tables\n\nWorkflow advice\n\nBash\nConfiguration\n.bashrc or .zshrc\nExported variables\nBetter bash history\n\n\nPython\n\nTime: 90 min\nDescription: This session will cover useful code snippets that are designed to improve your overall experience doing computational research. This will include how to customise your BASH and R environments, useful keyboard short cuts, and short pieces of code to do common tasks e.g. read a directory of files into R.\nR\nIncreasing Efficiency\nRStudio is the most popular environment for using R and so learning some keyboard shortcuts can make your life much nicer and prevent typos\nUseful keyboard shortcuts:\nalt + shift + K: keyboard shortcut to display common keyboard shortcuts\nctrl + shift + M: insert magrittr pipe\nalt + -: assignment arrow <-\nctrl + alt + I: insert R code chunk in Rmarkdown script\nctrl + .: jump to file/function\nctrl + shift + .: navigate through open scripts\nctrl + shift + F10: restart R\nRprofile\n\n<- \n# Load helper packages if using interactive session (doesn't alter your environment)\n# Don't add 'analysis' packages here\nif (interactive()) {\n  suppressMessages(require(devtools))\n  suppressMessages(require(usethis))\n  suppressMessages(require(testthat))\n}\n\n# set CRAN\noptions(repos = c(CRAN = \"https://cloud.r-project.org/\"))\n\n# warn on partial matches\noptions(\n  warnPartialMatchArgs = TRUE,\n  warnPartialMatchDollar = TRUE,\n  warnPartialMatchAttr = TRUE\n)\n\n# fancy quotes are annoying and lead to\n# 'copy + paste' bugs / frustrations\noptions(useFancyQuotes = FALSE)\n\nRMarkdown\nStandard template:\nBelow is the standard template I use for creating an Rmarkdown document.\nIt creates a floating table of contents, and lets you toggle the code on or off, and also dates the report for when it is made.\nThe first code chunk sets my default of echoing all of my code. The second will load the tidyverse which for me is pretty much always used and the quitely = FALSE means that I don’t get the usual loading messages about conflicts coming through into my document.\n---\ntitle: a cool title\nauthor: Murray Cadzow\ndate: `r Sys.Date()` \noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    toc_depth: 4\n    code_folding: \"show\" # \"hide\" if code less important for audience\n---\n\n```{r setup, include=FALSE} \nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r}\nlibrary(tidyverse, quietly = TRUE)\n```\n\nRmarkdown tricks\nHere are a couple of other Rmarkdown tricks that can be useful. The RMarkdown cookbook is a more comprehensive resource for these though.\nSelective evaluation of lines within a code chunk\nIn rmd the code chunk eval option takes more than just TRUE or FALSE - if you want to selectively run lines within a rmd code chunk you can exclude them explicitly:\n```{r, eval = c(-1,-3)}\n1\n\n3\n\n5 # only this line will evaluate\n```\n\n\n## 1\n\n## 3\n\n5 # only this line will evaluate\n\n\n[1] 5\n\nCreating verbatim code chunks\nSometimes, such as in the creation of this workshop, there is a need to show the code chunk verbatim. There is a section in the rmarkdown book about this and is extremely useful - https://bookdown.org/yihui/rmarkdown-cookbook/verbatim-code-chunks.html\nTo create verbatim code chunks, add r  ''\nMaking better tables\nThe knitr package provides a function to make alright looking standard tables with options for custom column names, alignments and rounding.\n\n\nlibrary(knitr)\nmtcars %>% kable(caption = \"A better table from knitr::kable\")\n\n\nTable 1: A better table from knitr::kable\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\nMerc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\nMerc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\nMerc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\nMerc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\nCadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\nLincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\nChrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\nFiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\nHonda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\nToyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\nToyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n\nmtcars %>% \n  select(1:4) %>% \n  head() %>% \n  kable(caption = \"A table caption\", \n        col.names = c(\"MPG\", \"Cylinders\", \"Displacement\",\"Horse Power\"))\n\n\nTable 2: A table caption\n\nMPG\nCylinders\nDisplacement\nHorse Power\nMazda RX4\n21.0\n6\n160\n110\nMazda RX4 Wag\n21.0\n6\n160\n110\nDatsun 710\n22.8\n4\n108\n93\nHornet 4 Drive\n21.4\n6\n258\n110\nHornet Sportabout\n18.7\n8\n360\n175\nValiant\n18.1\n6\n225\n105\n\nkableExtra brings in extra table styling. Although this website formatting prevents this displaying as it should in a normal RMarkdown document. Check out https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html for the documentation and examples for kableExtra.\n\n\nlibrary(kableExtra)\n\nmtcars %>% \n  select(1:4) %>% \n  head() %>% \n  kbl(caption = \"A table caption\", \n        col.names = c(\"MPG\", \"Cylinders\", \"Displacement\",\"Horse Power\")) %>% \n  row_spec(0, angle = -45) %>% \n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nTable 3: A table caption\n\n\n\n\nMPG\n\n\nCylinders\n\n\nDisplacement\n\n\nHorse Power\n\n\nMazda RX4\n\n\n21.0\n\n\n6\n\n\n160\n\n\n110\n\n\nMazda RX4 Wag\n\n\n21.0\n\n\n6\n\n\n160\n\n\n110\n\n\nDatsun 710\n\n\n22.8\n\n\n4\n\n\n108\n\n\n93\n\n\nHornet 4 Drive\n\n\n21.4\n\n\n6\n\n\n258\n\n\n110\n\n\nHornet Sportabout\n\n\n18.7\n\n\n8\n\n\n360\n\n\n175\n\n\nValiant\n\n\n18.1\n\n\n6\n\n\n225\n\n\n105\n\n\nWorkflow advice\nhere\n\n\nlibrary(here)\n\nhere()\n\n\n\njanitor\n\n\nlibrary(janitor)\n\nclean_names()\n\n\n\nusethis\n\n\nlibrary(usethis)\n\ncreate_project(path = \"path/to/new/project\") # creates a new rstudio project and opens it\nuse_r(name = \"new_r_script\") # creates a new script with the name provided\nedit_r_profile() # opens your Rprofile so you can edit it\n\n\n\nRprojects\nRead in a directory of files\n\n\nlibrary(tidyverse)\nfiles <- list.files(pattern = \"*.csv\", full.names = TRUE)\n\nmy_csvs <- map(files, read_csv)\n\n\n\nquickly find out the number of blank entries in a column:\n\n\ntable(is.na(df$colname))\n\n\n\nreplace blank cells in a data.frame with NA:\n\n\ndata[data == \"\"] = NA\n\n\n\nReorder a vector\n\n\nx <- c(\"b\", \"c\", \"a\")\n\n# sorts the vector then returns the indices \norder(x)\n\n\n[1] 3 1 2\n\nx[order(x)]\n\n\n[1] \"a\" \"b\" \"c\"\n\ndf <- data.frame(x = rep(1:3, each = 2), y = 6:1, z = letters[1:6])\n\n\n\nformat your numbers into a fixed width (turns from numeric to character)\n# returns character type of number rounded to 3 decimal places\nsprintf('%.3f', 0.123456) \nformat all numeric columns to 3 decimal places and make into a table\n\n\nlibrary(tidyverse)\n mtcars %>% mutate(across(where(is.numeric), list(~sprintf('%.3f', .) ) )) %>% kableExtra::kbl()\n\n\n\n\n\nmpg\n\n\ncyl\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\nam\n\n\ngear\n\n\ncarb\n\n\nmpg_1\n\n\ncyl_1\n\n\ndisp_1\n\n\nhp_1\n\n\ndrat_1\n\n\nwt_1\n\n\nqsec_1\n\n\nvs_1\n\n\nam_1\n\n\ngear_1\n\n\ncarb_1\n\n\nMazda RX4\n\n\n21.0\n\n\n6\n\n\n160.0\n\n\n110\n\n\n3.90\n\n\n2.620\n\n\n16.46\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\n21.000\n\n\n6.000\n\n\n160.000\n\n\n110.000\n\n\n3.900\n\n\n2.620\n\n\n16.460\n\n\n0.000\n\n\n1.000\n\n\n4.000\n\n\n4.000\n\n\nMazda RX4 Wag\n\n\n21.0\n\n\n6\n\n\n160.0\n\n\n110\n\n\n3.90\n\n\n2.875\n\n\n17.02\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\n21.000\n\n\n6.000\n\n\n160.000\n\n\n110.000\n\n\n3.900\n\n\n2.875\n\n\n17.020\n\n\n0.000\n\n\n1.000\n\n\n4.000\n\n\n4.000\n\n\nDatsun 710\n\n\n22.8\n\n\n4\n\n\n108.0\n\n\n93\n\n\n3.85\n\n\n2.320\n\n\n18.61\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n22.800\n\n\n4.000\n\n\n108.000\n\n\n93.000\n\n\n3.850\n\n\n2.320\n\n\n18.610\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nHornet 4 Drive\n\n\n21.4\n\n\n6\n\n\n258.0\n\n\n110\n\n\n3.08\n\n\n3.215\n\n\n19.44\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n21.400\n\n\n6.000\n\n\n258.000\n\n\n110.000\n\n\n3.080\n\n\n3.215\n\n\n19.440\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nHornet Sportabout\n\n\n18.7\n\n\n8\n\n\n360.0\n\n\n175\n\n\n3.15\n\n\n3.440\n\n\n17.02\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n18.700\n\n\n8.000\n\n\n360.000\n\n\n175.000\n\n\n3.150\n\n\n3.440\n\n\n17.020\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nValiant\n\n\n18.1\n\n\n6\n\n\n225.0\n\n\n105\n\n\n2.76\n\n\n3.460\n\n\n20.22\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n18.100\n\n\n6.000\n\n\n225.000\n\n\n105.000\n\n\n2.760\n\n\n3.460\n\n\n20.220\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nDuster 360\n\n\n14.3\n\n\n8\n\n\n360.0\n\n\n245\n\n\n3.21\n\n\n3.570\n\n\n15.84\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n14.300\n\n\n8.000\n\n\n360.000\n\n\n245.000\n\n\n3.210\n\n\n3.570\n\n\n15.840\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nMerc 240D\n\n\n24.4\n\n\n4\n\n\n146.7\n\n\n62\n\n\n3.69\n\n\n3.190\n\n\n20.00\n\n\n1\n\n\n0\n\n\n4\n\n\n2\n\n\n24.400\n\n\n4.000\n\n\n146.700\n\n\n62.000\n\n\n3.690\n\n\n3.190\n\n\n20.000\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n2.000\n\n\nMerc 230\n\n\n22.8\n\n\n4\n\n\n140.8\n\n\n95\n\n\n3.92\n\n\n3.150\n\n\n22.90\n\n\n1\n\n\n0\n\n\n4\n\n\n2\n\n\n22.800\n\n\n4.000\n\n\n140.800\n\n\n95.000\n\n\n3.920\n\n\n3.150\n\n\n22.900\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n2.000\n\n\nMerc 280\n\n\n19.2\n\n\n6\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.30\n\n\n1\n\n\n0\n\n\n4\n\n\n4\n\n\n19.200\n\n\n6.000\n\n\n167.600\n\n\n123.000\n\n\n3.920\n\n\n3.440\n\n\n18.300\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n4.000\n\n\nMerc 280C\n\n\n17.8\n\n\n6\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.90\n\n\n1\n\n\n0\n\n\n4\n\n\n4\n\n\n17.800\n\n\n6.000\n\n\n167.600\n\n\n123.000\n\n\n3.920\n\n\n3.440\n\n\n18.900\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n4.000\n\n\nMerc 450SE\n\n\n16.4\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n4.070\n\n\n17.40\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n16.400\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n4.070\n\n\n17.400\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nMerc 450SL\n\n\n17.3\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.730\n\n\n17.60\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n17.300\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n3.730\n\n\n17.600\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nMerc 450SLC\n\n\n15.2\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.780\n\n\n18.00\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n15.200\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n3.780\n\n\n18.000\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nCadillac Fleetwood\n\n\n10.4\n\n\n8\n\n\n472.0\n\n\n205\n\n\n2.93\n\n\n5.250\n\n\n17.98\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n10.400\n\n\n8.000\n\n\n472.000\n\n\n205.000\n\n\n2.930\n\n\n5.250\n\n\n17.980\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nLincoln Continental\n\n\n10.4\n\n\n8\n\n\n460.0\n\n\n215\n\n\n3.00\n\n\n5.424\n\n\n17.82\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n10.400\n\n\n8.000\n\n\n460.000\n\n\n215.000\n\n\n3.000\n\n\n5.424\n\n\n17.820\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nChrysler Imperial\n\n\n14.7\n\n\n8\n\n\n440.0\n\n\n230\n\n\n3.23\n\n\n5.345\n\n\n17.42\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n14.700\n\n\n8.000\n\n\n440.000\n\n\n230.000\n\n\n3.230\n\n\n5.345\n\n\n17.420\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nFiat 128\n\n\n32.4\n\n\n4\n\n\n78.7\n\n\n66\n\n\n4.08\n\n\n2.200\n\n\n19.47\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n32.400\n\n\n4.000\n\n\n78.700\n\n\n66.000\n\n\n4.080\n\n\n2.200\n\n\n19.470\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nHonda Civic\n\n\n30.4\n\n\n4\n\n\n75.7\n\n\n52\n\n\n4.93\n\n\n1.615\n\n\n18.52\n\n\n1\n\n\n1\n\n\n4\n\n\n2\n\n\n30.400\n\n\n4.000\n\n\n75.700\n\n\n52.000\n\n\n4.930\n\n\n1.615\n\n\n18.520\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n2.000\n\n\nToyota Corolla\n\n\n33.9\n\n\n4\n\n\n71.1\n\n\n65\n\n\n4.22\n\n\n1.835\n\n\n19.90\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n33.900\n\n\n4.000\n\n\n71.100\n\n\n65.000\n\n\n4.220\n\n\n1.835\n\n\n19.900\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nToyota Corona\n\n\n21.5\n\n\n4\n\n\n120.1\n\n\n97\n\n\n3.70\n\n\n2.465\n\n\n20.01\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n21.500\n\n\n4.000\n\n\n120.100\n\n\n97.000\n\n\n3.700\n\n\n2.465\n\n\n20.010\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nDodge Challenger\n\n\n15.5\n\n\n8\n\n\n318.0\n\n\n150\n\n\n2.76\n\n\n3.520\n\n\n16.87\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n15.500\n\n\n8.000\n\n\n318.000\n\n\n150.000\n\n\n2.760\n\n\n3.520\n\n\n16.870\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nAMC Javelin\n\n\n15.2\n\n\n8\n\n\n304.0\n\n\n150\n\n\n3.15\n\n\n3.435\n\n\n17.30\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n15.200\n\n\n8.000\n\n\n304.000\n\n\n150.000\n\n\n3.150\n\n\n3.435\n\n\n17.300\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nCamaro Z28\n\n\n13.3\n\n\n8\n\n\n350.0\n\n\n245\n\n\n3.73\n\n\n3.840\n\n\n15.41\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n13.300\n\n\n8.000\n\n\n350.000\n\n\n245.000\n\n\n3.730\n\n\n3.840\n\n\n15.410\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nPontiac Firebird\n\n\n19.2\n\n\n8\n\n\n400.0\n\n\n175\n\n\n3.08\n\n\n3.845\n\n\n17.05\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n19.200\n\n\n8.000\n\n\n400.000\n\n\n175.000\n\n\n3.080\n\n\n3.845\n\n\n17.050\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nFiat X1-9\n\n\n27.3\n\n\n4\n\n\n79.0\n\n\n66\n\n\n4.08\n\n\n1.935\n\n\n18.90\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n27.300\n\n\n4.000\n\n\n79.000\n\n\n66.000\n\n\n4.080\n\n\n1.935\n\n\n18.900\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nPorsche 914-2\n\n\n26.0\n\n\n4\n\n\n120.3\n\n\n91\n\n\n4.43\n\n\n2.140\n\n\n16.70\n\n\n0\n\n\n1\n\n\n5\n\n\n2\n\n\n26.000\n\n\n4.000\n\n\n120.300\n\n\n91.000\n\n\n4.430\n\n\n2.140\n\n\n16.700\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n2.000\n\n\nLotus Europa\n\n\n30.4\n\n\n4\n\n\n95.1\n\n\n113\n\n\n3.77\n\n\n1.513\n\n\n16.90\n\n\n1\n\n\n1\n\n\n5\n\n\n2\n\n\n30.400\n\n\n4.000\n\n\n95.100\n\n\n113.000\n\n\n3.770\n\n\n1.513\n\n\n16.900\n\n\n1.000\n\n\n1.000\n\n\n5.000\n\n\n2.000\n\n\nFord Pantera L\n\n\n15.8\n\n\n8\n\n\n351.0\n\n\n264\n\n\n4.22\n\n\n3.170\n\n\n14.50\n\n\n0\n\n\n1\n\n\n5\n\n\n4\n\n\n15.800\n\n\n8.000\n\n\n351.000\n\n\n264.000\n\n\n4.220\n\n\n3.170\n\n\n14.500\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n4.000\n\n\nFerrari Dino\n\n\n19.7\n\n\n6\n\n\n145.0\n\n\n175\n\n\n3.62\n\n\n2.770\n\n\n15.50\n\n\n0\n\n\n1\n\n\n5\n\n\n6\n\n\n19.700\n\n\n6.000\n\n\n145.000\n\n\n175.000\n\n\n3.620\n\n\n2.770\n\n\n15.500\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n6.000\n\n\nMaserati Bora\n\n\n15.0\n\n\n8\n\n\n301.0\n\n\n335\n\n\n3.54\n\n\n3.570\n\n\n14.60\n\n\n0\n\n\n1\n\n\n5\n\n\n8\n\n\n15.000\n\n\n8.000\n\n\n301.000\n\n\n335.000\n\n\n3.540\n\n\n3.570\n\n\n14.600\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n8.000\n\n\nVolvo 142E\n\n\n21.4\n\n\n4\n\n\n121.0\n\n\n109\n\n\n4.11\n\n\n2.780\n\n\n18.60\n\n\n1\n\n\n1\n\n\n4\n\n\n2\n\n\n21.400\n\n\n4.000\n\n\n121.000\n\n\n109.000\n\n\n4.110\n\n\n2.780\n\n\n18.600\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n2.000\n\n\ntidy way to transpose a dataframe/tibble\n\n\nmtcars %>%\n  tibble::rownames_to_column() %>% # may or may not be needed\n  tidyr::pivot_longer(-rowname,\n                      names_to = \"var\", \n                      values_to = \"value\") %>% \n  tidyr::pivot_wider(names_from = \"rowname\", \n                     values_from = \"value\")\n\n\n# A tibble: 11 x 33\n   var   `Mazda RX4` `Mazda RX4 Wag` `Datsun 710` `Hornet 4 Drive`\n   <chr>       <dbl>           <dbl>        <dbl>            <dbl>\n 1 mpg         21              21           22.8             21.4 \n 2 cyl          6               6            4                6   \n 3 disp       160             160          108              258   \n 4 hp         110             110           93              110   \n 5 drat         3.9             3.9          3.85             3.08\n 6 wt           2.62            2.88         2.32             3.22\n 7 qsec        16.5            17.0         18.6             19.4 \n 8 vs           0               0            1                1   \n 9 am           1               1            1                0   \n10 gear         4               4            4                3   \n11 carb         4               4            1                1   \n# … with 28 more variables: Hornet Sportabout <dbl>, Valiant <dbl>,\n#   Duster 360 <dbl>, Merc 240D <dbl>, Merc 230 <dbl>,\n#   Merc 280 <dbl>, Merc 280C <dbl>, Merc 450SE <dbl>,\n#   Merc 450SL <dbl>, Merc 450SLC <dbl>, Cadillac Fleetwood <dbl>,\n#   Lincoln Continental <dbl>, Chrysler Imperial <dbl>,\n#   Fiat 128 <dbl>, Honda Civic <dbl>, Toyota Corolla <dbl>,\n#   Toyota Corona <dbl>, Dodge Challenger <dbl>, AMC Javelin <dbl>,\n#   Camaro Z28 <dbl>, Pontiac Firebird <dbl>, Fiat X1-9 <dbl>,\n#   Porsche 914-2 <dbl>, Lotus Europa <dbl>, Ford Pantera L <dbl>,\n#   Ferrari Dino <dbl>, Maserati Bora <dbl>, Volvo 142E <dbl>\n\npull out the nth string after a string split\npurr::map_chr(stringr::str_split(string_vec, \"pattern\"), n)\n\n\npurrr::map_chr(stringr::str_split(c(\"chr1\",\"chr2\",\"chr3\"), \"chr\"), 2) # you would get back c(\"1\",\"2\",\"3\")\n\n\n[1] \"1\" \"2\" \"3\"\n\n\n\nlibrary(kableExtra)\n\n\n\nBash\nConfiguration\n.bashrc or .zshrc\nBASH is a common UNIX commandline or terminal, but for MacOS the default is zsh.\nTo find out which shell you are using enter this command:\necho $0\nCreating your .bashrc or .zsh\nBash profile for login .bashrc is the common file that controls your bash set up and usually can be found at ~/.bashrc. Some systems (such as MacOS) also have a file .bash_profile. If your system uses the .bash_profile file, you can make it refer to .bashrc by having this as the contents of .bash_profile:\n[[ -r ~/.bashrc ]] && . ~/.bashrc\nIn the .bashrc file it is useful to set a customised prompt, set variables that are useful - e.g. PATH to define where bash looks for installed software - and set up some custom commands (aliases) to make common tasks easier.\nCustom prompt Creating your own prompt in bash can be really useful rather than having a straight $. http://ezprompt.net provides a nice way of modifying your prompt and providing the code to add to your .bashrc.\nThings you might want to do:\nadd your username\nadd the hostname (the name of the computer)\nadd the current directory\nadd the full path to the current directory\nhave colour\nExported variables\nExporting variables is a useful way for defining environmental settings. Often this is setting a bash variable to tell programs where to look for things. This website has a few examples of bash variables (https://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/).\nIt is useful to include the RSTUDIO_PANDOC variables below.\nRmarkdown Pandoc A useful one on the server, is defining where R is going to look for pandoc for compiling RMarkdown documents.\nI have the following in my .bashrc file\nexport RSTUDIO_PANDOC=/usr/lib/rstudio/bin/pandoc\nBut the location is likely different on your computer. In R, use the command rmarkdown::find_pandoc() to find out where the RStudio version of pandoc is located.\nSetting this in your `.bashrc is important because there might be another instance of pandoc that is available on your PATH and might cause issues if you run R from the commandline. RSTUDIO_PANDOC is the name that R has specified to use if you want to customise which pandoc is used.\nBetter bash history\nBash records your history as it goes but if you are operating across multiple windows it doesn’t work the way you would hope for - e.g. it is only recorded from a single given session, even if you work in multiple. PROMPT_COMMAND is a bash variable that is run as part of running commands. This particular one is designed to time and date stamp commands (not run as root) and their working directory into a daily log file. The logs live in ~/.logs/ so this needs to be made for the command to run mkdir -p ~/.logs.\nexport PROMPT_COMMAND='if [ \"$(id -u)\" -ne 0 ]; then echo \"$(date \"+%Y-%m-%d.%H:%M:%S\") $(pwd) $(history 1)\" >> ~/.logs/bash-history-$(date \"+%Y-%m-%d\").log; fi'\nIf I want to search my logs I can use grep <command> ~/.logs/* and it will tell me all the times and directories I ran a command, and how I ran it. The history in these log files is made up of all commands you run on the computer, regardless of how many terminal windows you have open.\nAliases\nIf you have commands that you’re always typing out such as ls -lrth it can be useful to create an alias for the command that is shorter and easier to type out.\ne.g.\nalias ll=\"ls -lrth\"\nThis can be written in your .bashrc so that you can use them in new sessions. These can be very useful but remember they are only available on machines you have been able to customise your .bashrc.\nPython\nVirtual environments - conda - conda create - conda activate - conda deactivate\n\n\n\n",
      "last_modified": "2021-07-03T21:57:52+12:00"
    },
    {
      "path": "workflowlanguages.html",
      "title": "Introduction to Workflow Languages",
      "description": "| An introduction to using Snakemake",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "2021-07-06",
      "contents": "\n\nContents\nWorkflow languages\nWhat is a workflow language\nRepoducible and Replicatible\n\nCommon workflow language\nNextFlow\nSnakemake\nExample snakemake workflow\n\n\nTime: 80 mins\nDescription: This workshop will introduce you to workflow language systems that are used for creating reproducible research workflows. This workshop will use Snakemake as the example\nLearning objectives\nUnderstand principles behind computational reproducibility\nUnderstand the components of a Snakefile: rules, inputs, outputs, and actions\nWrite a simple Snakefile\nRun Snakemake from the shell\nUse Snakemake wildcards to simplify our rules\nWorkflow languages\nWhat is a workflow language\nWorkflows describe the series of steps that need to be performed in order to accomplish a task. A workflow language provides a syntax for us to describe a process and how it relates to other processes.\nRepoducible and Replicatible\n\n\n\n\n\n\nReproducibility is a strong focus for research. There are varying levels of reproducibility in computational terms, and much of it can be thought of in terms relating to time or location and what differences occur in environment when then change.\nCan I re-run my analysis now on my computer.\nCan I re-run my analysis in the future on my computer?\nCan you re-run my analysis now on your computer?\nDoes my software match yours?\n\nCan you re-run my analysis in the future?\nHas the software changed since the last time it was run?\n\nWhat aspects of the analysis are not affected by change in environment\nWhat are the steps in the analysis?\nIs the program the same version?\nIs the environment the program is run in the same? (think operating system)\nThere are different solutions for each level or the reproducibility problem and each adds an extra level of overhead\nCommon workflow language\n\nThe Common Workflow Language (CWL) is a standard for describing computational data-analysis workflows. Development of CWL is focused particularly on serving the data-intensive sciences, such as Bioinformatics, Medical Imaging, Astronomy, Physics, and Chemistry. A key goal of the CWL is to allow the creation of a workflow that is portable and thus may be run reproducibly in different computational environments. https://en.wikipedia.org/wiki/Common_Workflow_Language\n\nNextFlow\n\nNextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages. https://www.nextflow.io\n\nSnakemake\n\nThe Snakemake workflow management system is a tool to create reproducible and scalable data analyses. Workflows are described via a human readable, Python based language. They can be seamlessly scaled to server, cluster, grid and cloud environments, without the need to modify the workflow definition. Finally, Snakemake workflows can entail a description of required software, which will be automatically deployed to any execution environment. https://snakemake.readthedocs.io/en/stable/\n\nExample snakemake workflow\nWe’ll now work through the following lessons from this workshop https://carpentries-incubator.github.io/workflows-snakemake/index.html\nSetup\nManual Data Processing workflow\nSnakefiles\nWildcards\n\n\n\n",
      "last_modified": "2021-07-03T21:57:52+12:00"
    }
  ],
  "collections": []
}

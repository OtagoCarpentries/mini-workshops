{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\nThis site is a collection of mini workshops that are designed to be 1-4 hours in length.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:13+12:00"
    },
    {
      "path": "delvingdeeper.html",
      "title": "Delving Deeper into R",
      "description": "A deeper look into topics that get skipped.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": "https://github.com/murraycadzow"
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nData structuresStructures\r\nAtomics\r\nSubsetting\r\n\r\nExercises\r\nFunctions\r\nIterationThe for Loop\r\nfor loop with indices\r\nNesting of loops\r\n\r\nRunning Scripts\r\n\r\nTime: 90 minutes\r\n30 data structures\r\n30 functions\r\n30 loops\r\nDescription: This workshop will extend your understanding of R and cover how to interact with non-data.frame structured data such as vectors, matrices and lists. We’ll also look at creating your own functions and loops.\r\nLearning objectives:\r\ndata structures\r\nhomogenous structures\r\nvectors\r\nmatrix\r\n\r\nheterogenous structures\r\nlists\r\ndata.frame/tibble\r\n\r\n\r\ncreate functions\r\ncreate loops\r\ncreating/running scripts\r\nData structures\r\nHeavy reliance on content in http://adv-r.had.co.nz/Data-structures.html\r\nStructures\r\nHomogenous: vector, matrix\r\n\r\n\r\nexample_vector <- c(1,2,5,6)\r\nexample_vector\r\n\r\n\r\n[1] 1 2 5 6\r\n\r\nexample_matrix <- matrix(c(1:10), nrow = 2, byrow = TRUE)\r\nexample_matrix\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5]\r\n[1,]    1    2    3    4    5\r\n[2,]    6    7    8    9   10\r\n\r\nHeterogenous: list, data.frame (tibble), data.table(?)\r\n\r\n\r\nexample_list <- list(1:3, \"a\", c(TRUE, FALSE, TRUE), c(2.3, 5.9))\r\nexample_list\r\n\r\n\r\n[[1]]\r\n[1] 1 2 3\r\n\r\n[[2]]\r\n[1] \"a\"\r\n\r\n[[3]]\r\n[1]  TRUE FALSE  TRUE\r\n\r\n[[4]]\r\n[1] 2.3 5.9\r\n\r\nstr\r\nclass\r\nattributes\r\ntypeof\r\nlength\r\ndim\r\n\r\n\r\nitems <- c(\"fork\" = 5, \"table\" = 1,\"knife\" = 6,\"spoon\" = 4)\r\nnames(items)\r\n\r\nattributes(items)\r\n\r\n\r\nattributes(mtcars)\r\n\r\n\r\n\r\nAtomics\r\nnumeric\r\nlogical\r\ncharacter\r\nCoercion\r\nAll elements of an atomic vector must be the same type, so when you attempt to combine different types they will be coerced to the most flexible type. Types from least to most flexible are: logical -> integer -> double -> character.\r\nSubsetting\r\nhttp://adv-r.had.co.nz/Subsetting.html\r\nSubsetting operators:\r\n[ versus [[ versus $\r\n[\r\nThere are two main methods of subsetting in R, the first is by specifying the numbered positions (index) from the data structure we have. The second is by providing a logical vector - usually created through a conditional statement.\r\nConditional\r\nThese statements rely on a test (condition/comparison) that results in a boolean (TRUE/FALSE) to determine what gets subsetted (or in the context of functions, run). Boolean logic operators can be used in to modify or combine tests to result in a single TRUE or FALSE.\r\nBoolean Operation\r\nSymbol in R\r\nNOT\r\n!\r\nOR\r\n|\r\nAND\r\n&\r\nThese can be combined with the comparison operators (==, !=, <, <=, >, >=) to combine statements together into more complex logic statements. The result of the NOT, AND, and OR can be seen in the below logic table:\r\nStatement\r\nBecomes\r\n\r\n\r\n!TRUE\r\nFALSE\r\n\r\n\r\n!FALSE\r\nTRUE\r\n\r\n\r\nTRUE & TRUE\r\nTRUE\r\n\r\n\r\nTRUE & FALSE\r\nFALSE\r\n\r\n\r\nFALSE & TRUE\r\nFALSE\r\n\r\n\r\nFALSE & FALSE\r\nFALSE\r\n\r\n\r\nTRUE | TRUE\r\nTRUE\r\n\r\n\r\nTRUE | FALSE\r\nTRUE\r\n\r\n\r\nFALSE | TRUE\r\nTRUE\r\n\r\n\r\nFALSE | FALSE\r\nFALSE\r\n\r\n\r\nFor subsetting the final logical vector tells R which items to pull out - the positions that are TRUE. This logical vector needs to either be the same length as the vector being subsetted, or a factor of the length (so the vector can be ‘recycled’).\r\n\r\n\r\nmy_vec <- c(\"cat\",\"dog\",\"mouse\", \"horse\")\r\n\r\n# pull out the first and last elements\r\nmy_vec[c(TRUE, FALSE, FALSE, TRUE)]\r\n\r\n\r\n[1] \"cat\"   \"horse\"\r\n\r\n# pull out the \"odd\" elements\r\nmy_vec[c(TRUE, FALSE)]\r\n\r\n\r\n[1] \"cat\"   \"mouse\"\r\n\r\nPositional\r\n\r\n\r\nexample_list\r\n\r\n\r\n[[1]]\r\n[1] 1 2 3\r\n\r\n[[2]]\r\n[1] \"a\"\r\n\r\n[[3]]\r\n[1]  TRUE FALSE  TRUE\r\n\r\n[[4]]\r\n[1] 2.3 5.9\r\n\r\nexample_list[[c(1,2)]]\r\n\r\n\r\n[1] 2\r\n\r\nexample_list[c(1,2)]\r\n\r\n\r\n[[1]]\r\n[1] 1 2 3\r\n\r\n[[2]]\r\n[1] \"a\"\r\n\r\nExercises\r\nFunctions\r\nA function in R is comprised of four parts:\r\na name\r\ninputs (arguments/variables)\r\nthe body (the code that does something)\r\noutput (what gets returned after the body has run)\r\nAs you have been using R you will have noticed that many tasks have a particular function already available for you to use, such as mean or sd. In this section we are going to learn how to make our own functions. We can define our own functions using the function() function. Inside the parenthesis we define what variables are going to be passed to our function and curly braces contain the body of the function. If we want to return a value from our function R will automatically return the result of the last line of the function body or we end can do so explicitly with return(). We can assign this new function to a variable so that we call on it later, it is possible to have an anonymous function but these are usually found as part of map or the apply family but we won’t be covering anonymous functions in this workshop. To call our new function we now use the variable name and pass any required arguments.\r\nHere is an example of how to create a function:\r\n\r\n\r\nname <- function(variables) {\r\n  \r\n}\r\n\r\n\r\n\r\nNB: in RStudio you can get a code snippet/template by typing “fun” and hitting <tab>\r\nHere is an example function that will double the value of the provided number:\r\n\r\n\r\n# Doubles the provided number\r\ndouble <- function( num ){\r\n  num * 2\r\n}\r\n\r\ndouble(2)\r\n\r\n\r\n[1] 4\r\n\r\nImportant: Functions don’t auto-update when you modify the code that creates them, you must re-run the entire function code block.\r\nWe can also have multiple arguments for our functions:\r\n\r\n\r\n# Calculates BMI on a supplied height (m) and weight (kg)\r\ncalcBMI <- function(height, weight){\r\n  weight / height ^ 2\r\n}\r\n\r\n\r\ncalcBMI(height = 1.68, weight = 73)\r\n\r\n\r\n[1] 25.86451\r\n\r\nNB: Variables declared only inside a function don’t exist outside of the function – see the Scope section.\r\nIteration\r\nWhat is the point of learning about iteration? Similar to the reasons to create functions, iteration provides us a tool to be able to do repetitive tasks without having to copy and paste a lot of code. Take for instance the following example code that would read in csv files for a given country and then calculate the mean GDP for each:\r\n\r\n\r\ndata_nzl <- read_csv(\"gapminder_countries/nzl.csv\")\r\ndata_aus <- read_csv(\"gapminder_countries/aus.csv\")\r\ndata_usa <- read_csv(\"gapminder_countries/usa.csv\")\r\n\r\n# calculate the mean gdp from each country\r\nmean(data_nzl$gdp)\r\nmean(data_aus$gdp)\r\nmean(data_usa$gsp)\r\n\r\n\r\n\r\nNotice that there is a lot of code duplication (read_csv, and mean are duplicated for each country). In this example there is also the inclusion of a typo which is a very common mistake to make when changing inputs after copy and pasting - did you spot it? What happens if we need include another 20 or 100 countries? What happens if we also needed to calculate the median GDP for each? It quickly becomes quite laborious to scale. This is where iteration is useful, as it is all about providing a mechanism to specify how to repeat things.\r\nIn an abstract form, the above example could be captured like this:\r\n1. make a list of all the csv files\r\n2. for each csv file in the list:\r\n    - calculate the mean of the gdp column\r\nThis abstraction of the problem now gives us the steps to follow and deals with the heart of the problem rather than having to worry about a specific implementation.\r\nThe for Loop\r\nPalmer Penguins Dataset\r\nWe are going to use the Palmer Penguins dataset with our for loops. A set of Phenotypes from 3 Species and 3 Islands put together by Alison Horst\r\n\r\n\r\nif (!require(\"palmerpenguins\")) install.packages(\"palmerpenguins\")\r\nlibrary(palmerpenguins)\r\n\r\n\r\n\r\nfor loops usually contain the following parts:\r\nan output - somewhere to store the results from the loop\r\nan input set of items to do something to (a vector)\r\nloop body - code that will do something for a single value of the set.\r\nThe most common loop is the for loop. The template is as follows:\r\n\r\n\r\nfor (variable in vector) {\r\n  # loop body i.e. what to do each time\r\n}\r\n\r\n\r\n\r\nNB: You can get the for loop code snippet in RStudio by typing for then hitting <tab> and selecting “for {snippet}” from the drop down.\r\nWhen you see a for loop you can read it like a sentence: for each thing in my collection of things; I will do something to first thing; and then choose the next thing, do something, and repeat, until I have done something to each of my things in my collection.\r\nWe’ll compare this snippet to the following example which will print out the numbers 1 to 3 to explain what is going on.\r\n\r\n\r\nfor( num in 1:3 ){\r\n  print( num )\r\n}\r\n\r\n\r\n[1] 1\r\n[1] 2\r\n[1] 3\r\n\r\nIn this example, we wanted to print out each item from our set. Our set was a vector of numbers 1 to 3 in this case (in R a vector with a range of numbers can be made using the : operator in the format start:end). The task that we will do repetitively is print – our loop body. num is going to store the value of the current item. Our vector or collection is the numbers 1 to 3.\r\nThe loop gets run as such:\r\nnum takes on the first value from our set (1)\r\nthe loop body runs (prints the value of num which is 1)\r\nthere is nothing more to be done in the body so it moves onto the next item\r\nnum takes on the second value from the set (2)\r\nthe loop body runs (prints the value of num which is 2)\r\nthere is nothing more to be done in the body so it moves to the next item\r\nnum takes on the third value from out set (3)\r\nthe loop body runs (prints the value of num which is 3)\r\nthere is nothing more to be done in the body so it moves to the next item\r\nthere is not a next item so the loop exits.\r\nThis is how we could have achieved this task without a loop:\r\n\r\n\r\nprint(1)\r\n\r\n\r\n[1] 1\r\n\r\nprint(2)\r\n\r\n\r\n[1] 2\r\n\r\nprint(3)\r\n\r\n\r\n[1] 3\r\n\r\nThe duplication is apparent but not particularly laborious in this case. However, think about how this would scale. What if suddenly you needed to print the numbers 1 to 100, or 1000, or 10000? Using the copy-paste print() and manually filling in numbers is going to be pretty laborious and highly risky of typos. Using the for loop however, scales extremely easily and would be a matter of only changing what our collection of items going in was, everything else remains the same:\r\n\r\n\r\nfor( num in 1:10000 ){\r\n  print( num )\r\n}\r\n\r\n\r\n\r\nExercise\r\nPrint out the Column Names of the Penguins Dataset, 1 at a time.\r\n\r\n\r\n\r\nfor loop with indices\r\nOne version of the for loop that you might encounter (especially in other languages) is a version that uses indices to determine the current item from the set. In this case rather than the loop variable using the values of the items themselves, it uses the index of the item in the collection. Traditionally the loop variable is called i in this situation. While you could specify the indices manually through a vector e.g. 1:5, or 1:length(myvector), this can lead to some issues and the safer way is for R to generate the indices using seq_along() which returns a vector with all the indexes of your object.\r\n\r\n\r\nmyNumbers <- c(11,13,15,17,19)\r\n\r\n# show example of what seq_along() is providing\r\nseq_along(myNumbers)\r\n\r\n\r\n[1] 1 2 3 4 5\r\n\r\n# print each number and the index used from the collection by using the index to subset\r\nfor( i in seq_along(myNumbers) ){\r\n  print(paste(\"number =\", myNumbers[i], \"index (i) =\", i))\r\n}\r\n\r\n\r\n[1] \"number = 11 index (i) = 1\"\r\n[1] \"number = 13 index (i) = 2\"\r\n[1] \"number = 15 index (i) = 3\"\r\n[1] \"number = 17 index (i) = 4\"\r\n[1] \"number = 19 index (i) = 5\"\r\n\r\nExercise\r\nUsing indices, calculate the mean of the 2nd, 3rd and 5th Columns\r\n\r\n\r\n\r\nNesting of loops\r\nIt’s generally recommended to avoid the nesting of loops within other loops. Let’s say the outer loop has a total of n iterations to get through and an inner loop has m. Every time we add one extra iteration of the outer loop we end up adding an extra m iterations of the inner loop, so the total number of iterations is n * m. Depending on how big m is, this could be adding thousands or millions of extra iterations, causing your code to take longer to run. Some times however, nesting is unavoidable but it’s a good idea to keep an eye out for nesting if your code is taking a while to run as this is usually the first place things can be sped up.\r\n\r\n\r\nsex <- c(\"female\", \"male\")\r\n#species <- c(\"Adelie\",\"Chinstrap\",\"Gentoo\" )\r\nspecies <- levels(penguins$species)\r\n\r\nfor (i in species) {\r\n  for (j in sex) {\r\n    \r\n    # actions\r\n    # subset the data\r\n    new_data <- subset(penguins, penguins$species == i & penguins$sex == j) \r\n    \r\n    # calculate something\r\n    mean_value <- mean(new_data$body_mass_g, na.rm = T)\r\n    \r\n    # return a value\r\n    print(paste(\"The Average weight of\",j,i,\"penguins =\",round(mean_value/1000,2),\"Kgs\"))\r\n    \r\n  }\r\n  \r\n}\r\n\r\n\r\n[1] \"The Average weight of female Adelie penguins = 3.37 Kgs\"\r\n[1] \"The Average weight of male Adelie penguins = 4.04 Kgs\"\r\n[1] \"The Average weight of female Chinstrap penguins = 3.53 Kgs\"\r\n[1] \"The Average weight of male Chinstrap penguins = 3.94 Kgs\"\r\n[1] \"The Average weight of female Gentoo penguins = 4.68 Kgs\"\r\n[1] \"The Average weight of male Gentoo penguins = 5.48 Kgs\"\r\n\r\nRunning Scripts\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:16+12:00"
    },
    {
      "path": "githubwebsites.html",
      "title": "Creating Websites with GitHub",
      "description": "Create a website using GitHub Pages.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nWebsites with GitHubCreating a GitHub Account\r\nWebsite RepositoryCustomising\r\nMarkdown\r\n\r\nCreate a website from a templateCustomising\r\n\r\n\r\n\r\nTime: 120 min\r\nDescription: This workshop will introduce you to the world of using creating simple websites using the markdown language. A it will involve a practical application of version control principles which can be applied to other code as well.\r\nCreating up a github account Creating a repository Introduction to markdown syntax for formatting Creating a simple webpage with markdown Modifying pages and tracking changes How to use Github for collaboration\r\nWebsites with GitHub\r\nGit is a piece of software that manages version control (like track changes in Word) of code in projects known as repositories. GitHub is a website that is used to host these repositories but it also does much more and provides some automation of compiling code - one of these automations was designed to compile web-based languages into websites that could be used to communicate about your repositories. In this workshop, we’re going to leverage this automated process from what is known as GitHub Pages in order to create simple websites.\r\nFor this workshop, we’re going to create two websites, the first is a “sandpit” where we’ll introduce how to get a website up and running from scratch. The second, we’ll use an existing template for an academic CV that you can then customise.\r\nCreating a GitHub Account\r\nIn order to use GitHub, we need to create an account for ourselves.\r\nOpen up your web browser and go to https://github.com\r\n\r\n\r\n\r\nSign up a GitHub account\r\nSign in to your GitHub account\r\nNow that we’re set up with an account, we can start creating our first website\r\nWebsite Repository\r\nFirst we need to create the repository (project) where the code for our website is going to live.\r\nClick on the Plus icon in the top left\r\n\r\n\r\n\r\nSelect New Repository\r\nFill in the details\r\nChoose a name for your repository - this will end up as part of the url for your website: e.g. my-test-website for me would end up as https://murraycadzow.github.io/my-test-website\r\nSelect Public\r\nCheck Add a README file\r\n\r\nClick Create Repository\r\n\r\n\r\n\r\nCreate your site\r\n\r\n\r\n\r\nClick the Settings menu (near top right next to the cog)\r\nThen click on the Pages link from the left-hand Options menu\r\n\r\n\r\n\r\nCurrently GitHub Pages is disabled so we need to change the source from None to main.\r\n\r\n\r\n\r\nLeave it set to / (root) and click Save. This means that GitHub will take our files we write in markdown and convert them to HTML for us.\r\nGitHub will also tell you the URL that the website is now being published to\r\n\r\n\r\n\r\nCustomising\r\nNext we’ll pick a theme for our website.\r\nClick the Choose a theme button and then browse through the themes in the gallery and select one you like with the Select theme button.\r\nYou’ll then be put in to editing your README.md file which now contains a template text explaining some of the markdown syntax (which we’re about to cover next).\r\nScroll to the bottom and click the green Commit changes button\r\nNow click on your repository name at the top left to come back to seeing the contents of your repository\r\n\r\n\r\n\r\nYou’ll see two files, the first is the README.md which is being displayed, and the second is a file _config.yml which contains the configuration information for your website. So far the only configuration is the choice of theme.\r\nI chose the slate theme and now my website looks like this\r\n\r\n\r\n\r\nMarkdown\r\nGitHub Pages is an automatic system that will convert files written in markdown (commonly with a .md file extension) into HTML webpages. Markdown itself is a simplified text based syntax used for styling of writing.\r\nTake a look at the contents of the README.md to see some of the syntax we can use to style the text of our website.\r\nCreate a website from a template\r\nexample template: https://academicpages.github.io\r\nCustomising\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:17+12:00"
    },
    {
      "path": "index.html",
      "title": "Mini-Workshops",
      "description": "A collection of mini workshops\n",
      "author": [],
      "contents": "\r\nThis repository contains a collection of mini workshops that are designed to be 1-4 hours in length\r\nWorkshop sites can be found under the workshops menu and are available for:\r\nDelving deeper into R\r\nMore Tidyverse\r\nUseful code snippets for everyday tasks\r\nCreating websites with GitHub\r\nWorkflow Languages\r\nDebugging/Troubleshooting Tips and Tricks\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:18+12:00"
    },
    {
      "path": "moretidyverse.html",
      "title": "More Tidyverse",
      "description": "Take the time to explore the lesser known functions and packages of the Tidyverse\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nCore Tidyversetibble\r\nggplot2\r\ndplyr\r\ntidyr\r\nforcats\r\nstringr\r\nreadr\r\npurrr\r\n\r\nExtra Tidyverse\r\n\r\nTime: 90 min\r\nDescription: Take the time to explore the lesser known functions and packages of the Tidyverse. Learn about how to access googlesheets, use times/dates, manipulate text, use functional programming to replace loops, and more.\r\nLearning objectives\r\nWhat packages are in the tidyverse\r\nUnderstand functional programming\r\n\r\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. - https://www.tidyverse.org\r\n\r\nhttps://rstudio-education.github.io/tidyverse-cookbook/index.html\r\nCore Tidyverse\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n-- Attaching packages ----------------------------- tidyverse 1.3.1 --\r\nv ggplot2 3.3.5     v purrr   0.3.4\r\nv tibble  3.1.2     v dplyr   1.0.7\r\nv tidyr   1.1.3     v stringr 1.4.0\r\nv readr   1.4.0     v forcats 0.5.1\r\n-- Conflicts -------------------------------- tidyverse_conflicts() --\r\nx dplyr::filter() masks stats::filter()\r\nx dplyr::lag()    masks stats::lag()\r\n\r\ntibble\r\n\r\n\r\n\r\ntibble::tribble is a useful function if you want to manually input a small amount of data.\r\n\r\n\r\ntibble::tribble( ~column1, ~column2, ~column3,\r\n                 \"a\", 1, TRUE,\r\n                 \"b\", 2, FALSE)\r\n\r\n\r\n# A tibble: 2 x 3\r\n  column1 column2 column3\r\n  <chr>     <dbl> <lgl>  \r\n1 a             1 TRUE   \r\n2 b             2 FALSE  \r\n\r\ntibble::glimpse is similar to str but can be embedded in pipelines as it invisibly returns the original data.\r\n\r\n\r\ntibble::glimpse(mtcars)\r\n\r\n\r\nRows: 32\r\nColumns: 11\r\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1~\r\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4~\r\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,~\r\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180~\r\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3~\r\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,~\r\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,~\r\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1~\r\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1~\r\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4~\r\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2~\r\n\r\n\r\nExercise\r\nUse tribble() to manually input some data\r\n\r\nggplot2\r\n\r\n\r\n\r\nThe majority of ggplot2 functions are specific to the type of visualisation that is being created and well covered by the cheatsheet. There is one however that can be very helpful to know about.\r\nggplot2::theme_set allows you to apply a theme to all of your ggplots. It would usually be called near the start of a script.\r\n\r\n\r\n# Set the theme to theme_bw for all following plots\r\nggplot2::theme_set(theme_bw())\r\n\r\n\r\n\r\ndplyr\r\n\r\n\r\n\r\ndplyr::rename provides the renaming ability of dplyr::select but it doesn’t subset.\r\ndplyr::transmute is similar to dplyr::mutate except only columns specified are kept.\r\ndplyr::starts_with/dplyr::contains/dplyr::ends_with are useful helper functions to enable easy selection of columns.\r\ndplyr::relocate is a very useful function that enables you to relocate columns to specific locations. It uses a .before or .after argument to specify where you to more the column(s) to.\r\ndplyr::across lets you apply a function or functions across multiple columns. This is usually used in conjunction with dplyr::summarise or dplyr::mutate.\r\ndplyr::c_across lets you combine values from across multiple columns, such as performing a summarising function on select columns.\r\ndplyr::case_when is useful in situations where you would have multiple ifelses.\r\n\r\nExercise\r\n\r\ntidyr\r\n\r\n\r\n\r\ntidyr::nest\r\ntidyr::unnest\r\ntidyr::separate/tidyr::separate_rows\r\ntidyr::unite\r\ntidyr::crossing\r\ntidyr::drop_na\r\ntidyr::replace_na\r\n\r\nExercise\r\n\r\nforcats\r\n\r\n\r\n\r\nforcats::relevel\r\nforcats::reorder\r\nforcats::recode\r\n\r\nExercise\r\nUse forcats to re-order your bar plot so that it is most frequent on the left, and least on the right.\r\n\r\nstringr\r\n\r\n\r\n\r\nstringr::str_detect\r\nstringr::str_remove\r\nstringr::str_extract\r\n\r\nExercise\r\n\r\nreadr\r\n\r\n\r\n\r\nreadr::read_csv_chunked\r\nreadr::parse_number is an extremely useful function to know about if you are reading data into R that you know is numerical in nature but might contain extra characters such as units.\r\n\r\n\r\ntext_to_parse <- c(\" 0.4m\", \"-6\", \"a5\", \"1E-2\", \"24%\", \"3e2\")\r\n\r\nreadr::parse_number(text_to_parse)\r\n\r\n\r\n[1]   0.40  -6.00   5.00   0.01  24.00 300.00\r\n\r\n\r\nExercise\r\n\r\npurrr\r\n\r\n\r\n\r\npurrr::map\r\npurrr::walk\r\npurrr::transpose\r\npurrr::keep/purrr::discard/purrr::pluck\r\n\r\nExercise\r\n\r\nExtra Tidyverse\r\nreadxl\r\ngooglesheets4\r\n\r\n\r\nlibrary(googlesheets4)\r\n\r\n# grab the url from the browser for your sheet\r\nurl <- \"https://docs.google.com/spreadsheets/d/1MbE2_XUfQ9KwfKAJhEDPb6KgOg2EaoXr5IN2F-hjBNI/edit#gid=0\"\r\n\r\n# read the sheet in\r\nmy_google_sheet <- read_sheet(url)\r\n\r\n\r\n\r\nThe first time running read_sheet you will be asked to authenticate and a web broswer will open up.\r\nlubridate\r\nlubridate::ymd\r\n\r\nhms\r\nmagrittr\r\nmagrittr::%$%\r\nmagrittr::%T%\r\n\r\nglue\r\nglue::glue\r\n\r\ndtplyr\r\ndbplyr\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:22+12:00"
    },
    {
      "path": "usefulcodesnippets.html",
      "title": "Useful code snippets for everyday tasks",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nRRprofile\r\nRMarkdown\r\nWorkflow advice\r\n\r\nBashConfiguration.bashrc or .zshrc\r\nExported variables\r\nBetter bash history\r\n\r\n\r\nPython\r\n\r\nTime: 90 min\r\nDescription: This session will cover useful code snippets that are designed to improve your overall experience doing computational research. This will include how to customise your BASH and R environments, useful keyboard short cuts, and short pieces of code to do common tasks e.g. read a directory of files into R.\r\nR\r\nRprofile\r\n\r\n\r\n# Load helper packages if using interactive session (doesn't alter your environment)\r\n# Don't add 'analysis' packages here\r\nif (interactive()) {\r\n  suppressMessages(require(devtools))\r\n  suppressMessages(require(usethis))\r\n  suppressMessages(require(testthat))\r\n}\r\n\r\n# set CRAN\r\noptions(repos = c(CRAN = \"https://cloud.r-project.org/\"))\r\n\r\n# warn on partial matches\r\noptions(\r\n  warnPartialMatchArgs = TRUE,\r\n  warnPartialMatchDollar = TRUE,\r\n  warnPartialMatchAttr = TRUE\r\n)\r\n\r\n# fancy quotes are annoying and lead to\r\n# 'copy + paste' bugs / frustrations\r\noptions(useFancyQuotes = FALSE)\r\n\r\n\r\n\r\nRMarkdown\r\nIn rmd the code chunk eval option takes more than just TRUE or FALSE - if you want to selectively run lines within a rmd code chunk you can exclude them explicitly:\r\n```{r, eval = c(-1,-3)}\r\n1\r\n\r\n3\r\n\r\n5 # only this line will evaluate\r\n```\r\n\r\n\r\n## 1\r\n\r\n## 3\r\n\r\n5 # only this line will evaluate\r\n\r\n\r\n[1] 5\r\n\r\nWorkflow advice\r\nhere\r\n\r\n\r\nlibrary(here)\r\n\r\nhere()\r\n\r\n\r\n\r\njanitor\r\n\r\n\r\nlibrary(janitor)\r\n\r\nclean_names()\r\n\r\n\r\n\r\nusethis\r\n\r\n\r\nlibrary(usethis)\r\n\r\nuse_r()\r\nedit_r_profile()\r\ncreate_project()\r\n\r\n\r\n\r\nRprojects\r\nRead in a directory of files\r\n\r\n\r\nlibrary(tidyverse)\r\nfiles <- list.files(pattern = \"*.csv\", full.names = TRUE)\r\n\r\nmy_csvs <- map(files, read_csv)\r\n\r\n\r\n\r\nquickly find out the number of blank entries in a column:\r\n\r\n\r\ntable(is.na(df$colname))\r\n\r\n\r\n\r\nreplace blank cells in a data.frame with NA:\r\n\r\n\r\ndata[data == \"\"] = NA\r\n\r\n\r\n\r\nReorder a vector\r\n\r\n\r\nx <- c(\"b\", \"c\", \"a\")\r\n\r\n# sorts the vector then returns the indices \r\norder(x)\r\n\r\n\r\n[1] 3 1 2\r\n\r\nx[order(x)]\r\n\r\n\r\n[1] \"a\" \"b\" \"c\"\r\n\r\ndf <- data.frame(x = rep(1:3, each = 2), y = 6:1, z = letters[1:6])\r\n\r\n\r\n\r\nformat your numbers into a fixed width (turns from numeric to character)\r\n# returns character type of number rounded to 3 decimal places\r\nsprintf('%.3f', 0.123456) \r\nformat all numeric columns to 3 decimal places and make into a table\r\n\r\n\r\nlibrary(tidyverse)\r\n mtcars %>% mutate(across(where(is.numeric), list(~sprintf('%.3f', .) ) )) %>% kableExtra::kbl()\r\n\r\n\r\n\r\n\r\n\r\nmpg\r\n\r\n\r\ncyl\r\n\r\n\r\ndisp\r\n\r\n\r\nhp\r\n\r\n\r\ndrat\r\n\r\n\r\nwt\r\n\r\n\r\nqsec\r\n\r\n\r\nvs\r\n\r\n\r\nam\r\n\r\n\r\ngear\r\n\r\n\r\ncarb\r\n\r\n\r\nmpg_1\r\n\r\n\r\ncyl_1\r\n\r\n\r\ndisp_1\r\n\r\n\r\nhp_1\r\n\r\n\r\ndrat_1\r\n\r\n\r\nwt_1\r\n\r\n\r\nqsec_1\r\n\r\n\r\nvs_1\r\n\r\n\r\nam_1\r\n\r\n\r\ngear_1\r\n\r\n\r\ncarb_1\r\n\r\n\r\nMazda RX4\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160.0\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.620\r\n\r\n\r\n16.46\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n21.000\r\n\r\n\r\n6.000\r\n\r\n\r\n160.000\r\n\r\n\r\n110.000\r\n\r\n\r\n3.900\r\n\r\n\r\n2.620\r\n\r\n\r\n16.460\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n4.000\r\n\r\n\r\nMazda RX4 Wag\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160.0\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.875\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n21.000\r\n\r\n\r\n6.000\r\n\r\n\r\n160.000\r\n\r\n\r\n110.000\r\n\r\n\r\n3.900\r\n\r\n\r\n2.875\r\n\r\n\r\n17.020\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n4.000\r\n\r\n\r\nDatsun 710\r\n\r\n\r\n22.8\r\n\r\n\r\n4\r\n\r\n\r\n108.0\r\n\r\n\r\n93\r\n\r\n\r\n3.85\r\n\r\n\r\n2.320\r\n\r\n\r\n18.61\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n22.800\r\n\r\n\r\n4.000\r\n\r\n\r\n108.000\r\n\r\n\r\n93.000\r\n\r\n\r\n3.850\r\n\r\n\r\n2.320\r\n\r\n\r\n18.610\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n1.000\r\n\r\n\r\nHornet 4 Drive\r\n\r\n\r\n21.4\r\n\r\n\r\n6\r\n\r\n\r\n258.0\r\n\r\n\r\n110\r\n\r\n\r\n3.08\r\n\r\n\r\n3.215\r\n\r\n\r\n19.44\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n21.400\r\n\r\n\r\n6.000\r\n\r\n\r\n258.000\r\n\r\n\r\n110.000\r\n\r\n\r\n3.080\r\n\r\n\r\n3.215\r\n\r\n\r\n19.440\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n1.000\r\n\r\n\r\nHornet Sportabout\r\n\r\n\r\n18.7\r\n\r\n\r\n8\r\n\r\n\r\n360.0\r\n\r\n\r\n175\r\n\r\n\r\n3.15\r\n\r\n\r\n3.440\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\n18.700\r\n\r\n\r\n8.000\r\n\r\n\r\n360.000\r\n\r\n\r\n175.000\r\n\r\n\r\n3.150\r\n\r\n\r\n3.440\r\n\r\n\r\n17.020\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n2.000\r\n\r\n\r\nValiant\r\n\r\n\r\n18.1\r\n\r\n\r\n6\r\n\r\n\r\n225.0\r\n\r\n\r\n105\r\n\r\n\r\n2.76\r\n\r\n\r\n3.460\r\n\r\n\r\n20.22\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n18.100\r\n\r\n\r\n6.000\r\n\r\n\r\n225.000\r\n\r\n\r\n105.000\r\n\r\n\r\n2.760\r\n\r\n\r\n3.460\r\n\r\n\r\n20.220\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n1.000\r\n\r\n\r\nDuster 360\r\n\r\n\r\n14.3\r\n\r\n\r\n8\r\n\r\n\r\n360.0\r\n\r\n\r\n245\r\n\r\n\r\n3.21\r\n\r\n\r\n3.570\r\n\r\n\r\n15.84\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n14.300\r\n\r\n\r\n8.000\r\n\r\n\r\n360.000\r\n\r\n\r\n245.000\r\n\r\n\r\n3.210\r\n\r\n\r\n3.570\r\n\r\n\r\n15.840\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n4.000\r\n\r\n\r\nMerc 240D\r\n\r\n\r\n24.4\r\n\r\n\r\n4\r\n\r\n\r\n146.7\r\n\r\n\r\n62\r\n\r\n\r\n3.69\r\n\r\n\r\n3.190\r\n\r\n\r\n20.00\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n24.400\r\n\r\n\r\n4.000\r\n\r\n\r\n146.700\r\n\r\n\r\n62.000\r\n\r\n\r\n3.690\r\n\r\n\r\n3.190\r\n\r\n\r\n20.000\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n4.000\r\n\r\n\r\n2.000\r\n\r\n\r\nMerc 230\r\n\r\n\r\n22.8\r\n\r\n\r\n4\r\n\r\n\r\n140.8\r\n\r\n\r\n95\r\n\r\n\r\n3.92\r\n\r\n\r\n3.150\r\n\r\n\r\n22.90\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n22.800\r\n\r\n\r\n4.000\r\n\r\n\r\n140.800\r\n\r\n\r\n95.000\r\n\r\n\r\n3.920\r\n\r\n\r\n3.150\r\n\r\n\r\n22.900\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n4.000\r\n\r\n\r\n2.000\r\n\r\n\r\nMerc 280\r\n\r\n\r\n19.2\r\n\r\n\r\n6\r\n\r\n\r\n167.6\r\n\r\n\r\n123\r\n\r\n\r\n3.92\r\n\r\n\r\n3.440\r\n\r\n\r\n18.30\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n19.200\r\n\r\n\r\n6.000\r\n\r\n\r\n167.600\r\n\r\n\r\n123.000\r\n\r\n\r\n3.920\r\n\r\n\r\n3.440\r\n\r\n\r\n18.300\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n4.000\r\n\r\n\r\n4.000\r\n\r\n\r\nMerc 280C\r\n\r\n\r\n17.8\r\n\r\n\r\n6\r\n\r\n\r\n167.6\r\n\r\n\r\n123\r\n\r\n\r\n3.92\r\n\r\n\r\n3.440\r\n\r\n\r\n18.90\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n17.800\r\n\r\n\r\n6.000\r\n\r\n\r\n167.600\r\n\r\n\r\n123.000\r\n\r\n\r\n3.920\r\n\r\n\r\n3.440\r\n\r\n\r\n18.900\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n4.000\r\n\r\n\r\n4.000\r\n\r\n\r\nMerc 450SE\r\n\r\n\r\n16.4\r\n\r\n\r\n8\r\n\r\n\r\n275.8\r\n\r\n\r\n180\r\n\r\n\r\n3.07\r\n\r\n\r\n4.070\r\n\r\n\r\n17.40\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n16.400\r\n\r\n\r\n8.000\r\n\r\n\r\n275.800\r\n\r\n\r\n180.000\r\n\r\n\r\n3.070\r\n\r\n\r\n4.070\r\n\r\n\r\n17.400\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n3.000\r\n\r\n\r\nMerc 450SL\r\n\r\n\r\n17.3\r\n\r\n\r\n8\r\n\r\n\r\n275.8\r\n\r\n\r\n180\r\n\r\n\r\n3.07\r\n\r\n\r\n3.730\r\n\r\n\r\n17.60\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n17.300\r\n\r\n\r\n8.000\r\n\r\n\r\n275.800\r\n\r\n\r\n180.000\r\n\r\n\r\n3.070\r\n\r\n\r\n3.730\r\n\r\n\r\n17.600\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n3.000\r\n\r\n\r\nMerc 450SLC\r\n\r\n\r\n15.2\r\n\r\n\r\n8\r\n\r\n\r\n275.8\r\n\r\n\r\n180\r\n\r\n\r\n3.07\r\n\r\n\r\n3.780\r\n\r\n\r\n18.00\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n15.200\r\n\r\n\r\n8.000\r\n\r\n\r\n275.800\r\n\r\n\r\n180.000\r\n\r\n\r\n3.070\r\n\r\n\r\n3.780\r\n\r\n\r\n18.000\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n3.000\r\n\r\n\r\nCadillac Fleetwood\r\n\r\n\r\n10.4\r\n\r\n\r\n8\r\n\r\n\r\n472.0\r\n\r\n\r\n205\r\n\r\n\r\n2.93\r\n\r\n\r\n5.250\r\n\r\n\r\n17.98\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n10.400\r\n\r\n\r\n8.000\r\n\r\n\r\n472.000\r\n\r\n\r\n205.000\r\n\r\n\r\n2.930\r\n\r\n\r\n5.250\r\n\r\n\r\n17.980\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n4.000\r\n\r\n\r\nLincoln Continental\r\n\r\n\r\n10.4\r\n\r\n\r\n8\r\n\r\n\r\n460.0\r\n\r\n\r\n215\r\n\r\n\r\n3.00\r\n\r\n\r\n5.424\r\n\r\n\r\n17.82\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n10.400\r\n\r\n\r\n8.000\r\n\r\n\r\n460.000\r\n\r\n\r\n215.000\r\n\r\n\r\n3.000\r\n\r\n\r\n5.424\r\n\r\n\r\n17.820\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n4.000\r\n\r\n\r\nChrysler Imperial\r\n\r\n\r\n14.7\r\n\r\n\r\n8\r\n\r\n\r\n440.0\r\n\r\n\r\n230\r\n\r\n\r\n3.23\r\n\r\n\r\n5.345\r\n\r\n\r\n17.42\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n14.700\r\n\r\n\r\n8.000\r\n\r\n\r\n440.000\r\n\r\n\r\n230.000\r\n\r\n\r\n3.230\r\n\r\n\r\n5.345\r\n\r\n\r\n17.420\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n4.000\r\n\r\n\r\nFiat 128\r\n\r\n\r\n32.4\r\n\r\n\r\n4\r\n\r\n\r\n78.7\r\n\r\n\r\n66\r\n\r\n\r\n4.08\r\n\r\n\r\n2.200\r\n\r\n\r\n19.47\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n32.400\r\n\r\n\r\n4.000\r\n\r\n\r\n78.700\r\n\r\n\r\n66.000\r\n\r\n\r\n4.080\r\n\r\n\r\n2.200\r\n\r\n\r\n19.470\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n1.000\r\n\r\n\r\nHonda Civic\r\n\r\n\r\n30.4\r\n\r\n\r\n4\r\n\r\n\r\n75.7\r\n\r\n\r\n52\r\n\r\n\r\n4.93\r\n\r\n\r\n1.615\r\n\r\n\r\n18.52\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n30.400\r\n\r\n\r\n4.000\r\n\r\n\r\n75.700\r\n\r\n\r\n52.000\r\n\r\n\r\n4.930\r\n\r\n\r\n1.615\r\n\r\n\r\n18.520\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n2.000\r\n\r\n\r\nToyota Corolla\r\n\r\n\r\n33.9\r\n\r\n\r\n4\r\n\r\n\r\n71.1\r\n\r\n\r\n65\r\n\r\n\r\n4.22\r\n\r\n\r\n1.835\r\n\r\n\r\n19.90\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n33.900\r\n\r\n\r\n4.000\r\n\r\n\r\n71.100\r\n\r\n\r\n65.000\r\n\r\n\r\n4.220\r\n\r\n\r\n1.835\r\n\r\n\r\n19.900\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n1.000\r\n\r\n\r\nToyota Corona\r\n\r\n\r\n21.5\r\n\r\n\r\n4\r\n\r\n\r\n120.1\r\n\r\n\r\n97\r\n\r\n\r\n3.70\r\n\r\n\r\n2.465\r\n\r\n\r\n20.01\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n21.500\r\n\r\n\r\n4.000\r\n\r\n\r\n120.100\r\n\r\n\r\n97.000\r\n\r\n\r\n3.700\r\n\r\n\r\n2.465\r\n\r\n\r\n20.010\r\n\r\n\r\n1.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n1.000\r\n\r\n\r\nDodge Challenger\r\n\r\n\r\n15.5\r\n\r\n\r\n8\r\n\r\n\r\n318.0\r\n\r\n\r\n150\r\n\r\n\r\n2.76\r\n\r\n\r\n3.520\r\n\r\n\r\n16.87\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\n15.500\r\n\r\n\r\n8.000\r\n\r\n\r\n318.000\r\n\r\n\r\n150.000\r\n\r\n\r\n2.760\r\n\r\n\r\n3.520\r\n\r\n\r\n16.870\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n2.000\r\n\r\n\r\nAMC Javelin\r\n\r\n\r\n15.2\r\n\r\n\r\n8\r\n\r\n\r\n304.0\r\n\r\n\r\n150\r\n\r\n\r\n3.15\r\n\r\n\r\n3.435\r\n\r\n\r\n17.30\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\n15.200\r\n\r\n\r\n8.000\r\n\r\n\r\n304.000\r\n\r\n\r\n150.000\r\n\r\n\r\n3.150\r\n\r\n\r\n3.435\r\n\r\n\r\n17.300\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n2.000\r\n\r\n\r\nCamaro Z28\r\n\r\n\r\n13.3\r\n\r\n\r\n8\r\n\r\n\r\n350.0\r\n\r\n\r\n245\r\n\r\n\r\n3.73\r\n\r\n\r\n3.840\r\n\r\n\r\n15.41\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n13.300\r\n\r\n\r\n8.000\r\n\r\n\r\n350.000\r\n\r\n\r\n245.000\r\n\r\n\r\n3.730\r\n\r\n\r\n3.840\r\n\r\n\r\n15.410\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n4.000\r\n\r\n\r\nPontiac Firebird\r\n\r\n\r\n19.2\r\n\r\n\r\n8\r\n\r\n\r\n400.0\r\n\r\n\r\n175\r\n\r\n\r\n3.08\r\n\r\n\r\n3.845\r\n\r\n\r\n17.05\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\n19.200\r\n\r\n\r\n8.000\r\n\r\n\r\n400.000\r\n\r\n\r\n175.000\r\n\r\n\r\n3.080\r\n\r\n\r\n3.845\r\n\r\n\r\n17.050\r\n\r\n\r\n0.000\r\n\r\n\r\n0.000\r\n\r\n\r\n3.000\r\n\r\n\r\n2.000\r\n\r\n\r\nFiat X1-9\r\n\r\n\r\n27.3\r\n\r\n\r\n4\r\n\r\n\r\n79.0\r\n\r\n\r\n66\r\n\r\n\r\n4.08\r\n\r\n\r\n1.935\r\n\r\n\r\n18.90\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n27.300\r\n\r\n\r\n4.000\r\n\r\n\r\n79.000\r\n\r\n\r\n66.000\r\n\r\n\r\n4.080\r\n\r\n\r\n1.935\r\n\r\n\r\n18.900\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n1.000\r\n\r\n\r\nPorsche 914-2\r\n\r\n\r\n26.0\r\n\r\n\r\n4\r\n\r\n\r\n120.3\r\n\r\n\r\n91\r\n\r\n\r\n4.43\r\n\r\n\r\n2.140\r\n\r\n\r\n16.70\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n2\r\n\r\n\r\n26.000\r\n\r\n\r\n4.000\r\n\r\n\r\n120.300\r\n\r\n\r\n91.000\r\n\r\n\r\n4.430\r\n\r\n\r\n2.140\r\n\r\n\r\n16.700\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n5.000\r\n\r\n\r\n2.000\r\n\r\n\r\nLotus Europa\r\n\r\n\r\n30.4\r\n\r\n\r\n4\r\n\r\n\r\n95.1\r\n\r\n\r\n113\r\n\r\n\r\n3.77\r\n\r\n\r\n1.513\r\n\r\n\r\n16.90\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n2\r\n\r\n\r\n30.400\r\n\r\n\r\n4.000\r\n\r\n\r\n95.100\r\n\r\n\r\n113.000\r\n\r\n\r\n3.770\r\n\r\n\r\n1.513\r\n\r\n\r\n16.900\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n5.000\r\n\r\n\r\n2.000\r\n\r\n\r\nFord Pantera L\r\n\r\n\r\n15.8\r\n\r\n\r\n8\r\n\r\n\r\n351.0\r\n\r\n\r\n264\r\n\r\n\r\n4.22\r\n\r\n\r\n3.170\r\n\r\n\r\n14.50\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n4\r\n\r\n\r\n15.800\r\n\r\n\r\n8.000\r\n\r\n\r\n351.000\r\n\r\n\r\n264.000\r\n\r\n\r\n4.220\r\n\r\n\r\n3.170\r\n\r\n\r\n14.500\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n5.000\r\n\r\n\r\n4.000\r\n\r\n\r\nFerrari Dino\r\n\r\n\r\n19.7\r\n\r\n\r\n6\r\n\r\n\r\n145.0\r\n\r\n\r\n175\r\n\r\n\r\n3.62\r\n\r\n\r\n2.770\r\n\r\n\r\n15.50\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n6\r\n\r\n\r\n19.700\r\n\r\n\r\n6.000\r\n\r\n\r\n145.000\r\n\r\n\r\n175.000\r\n\r\n\r\n3.620\r\n\r\n\r\n2.770\r\n\r\n\r\n15.500\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n5.000\r\n\r\n\r\n6.000\r\n\r\n\r\nMaserati Bora\r\n\r\n\r\n15.0\r\n\r\n\r\n8\r\n\r\n\r\n301.0\r\n\r\n\r\n335\r\n\r\n\r\n3.54\r\n\r\n\r\n3.570\r\n\r\n\r\n14.60\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n8\r\n\r\n\r\n15.000\r\n\r\n\r\n8.000\r\n\r\n\r\n301.000\r\n\r\n\r\n335.000\r\n\r\n\r\n3.540\r\n\r\n\r\n3.570\r\n\r\n\r\n14.600\r\n\r\n\r\n0.000\r\n\r\n\r\n1.000\r\n\r\n\r\n5.000\r\n\r\n\r\n8.000\r\n\r\n\r\nVolvo 142E\r\n\r\n\r\n21.4\r\n\r\n\r\n4\r\n\r\n\r\n121.0\r\n\r\n\r\n109\r\n\r\n\r\n4.11\r\n\r\n\r\n2.780\r\n\r\n\r\n18.60\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n21.400\r\n\r\n\r\n4.000\r\n\r\n\r\n121.000\r\n\r\n\r\n109.000\r\n\r\n\r\n4.110\r\n\r\n\r\n2.780\r\n\r\n\r\n18.600\r\n\r\n\r\n1.000\r\n\r\n\r\n1.000\r\n\r\n\r\n4.000\r\n\r\n\r\n2.000\r\n\r\n\r\ntidy way to transpose a dataframe/tibble\r\n\r\n\r\nmtcars %>%\r\n  tibble::rownames_to_column() %>% # may or may not be needed\r\n  tidyr::pivot_longer(-rowname,\r\n                      names_to = \"var\", \r\n                      values_to = \"value\") %>% \r\n  tidyr::pivot_wider(names_from = \"rowname\", \r\n                     values_from = \"value\")\r\n\r\n\r\n# A tibble: 11 x 33\r\n   var   `Mazda RX4` `Mazda RX4 Wag` `Datsun 710` `Hornet 4 Drive`\r\n   <chr>       <dbl>           <dbl>        <dbl>            <dbl>\r\n 1 mpg         21              21           22.8             21.4 \r\n 2 cyl          6               6            4                6   \r\n 3 disp       160             160          108              258   \r\n 4 hp         110             110           93              110   \r\n 5 drat         3.9             3.9          3.85             3.08\r\n 6 wt           2.62            2.88         2.32             3.22\r\n 7 qsec        16.5            17.0         18.6             19.4 \r\n 8 vs           0               0            1                1   \r\n 9 am           1               1            1                0   \r\n10 gear         4               4            4                3   \r\n11 carb         4               4            1                1   \r\n# ... with 28 more variables: Hornet Sportabout <dbl>, Valiant <dbl>,\r\n#   Duster 360 <dbl>, Merc 240D <dbl>, Merc 230 <dbl>,\r\n#   Merc 280 <dbl>, Merc 280C <dbl>, Merc 450SE <dbl>,\r\n#   Merc 450SL <dbl>, Merc 450SLC <dbl>, Cadillac Fleetwood <dbl>,\r\n#   Lincoln Continental <dbl>, Chrysler Imperial <dbl>,\r\n#   Fiat 128 <dbl>, Honda Civic <dbl>, Toyota Corolla <dbl>,\r\n#   Toyota Corona <dbl>, Dodge Challenger <dbl>, AMC Javelin <dbl>,\r\n#   Camaro Z28 <dbl>, Pontiac Firebird <dbl>, Fiat X1-9 <dbl>,\r\n#   Porsche 914-2 <dbl>, Lotus Europa <dbl>, Ford Pantera L <dbl>,\r\n#   Ferrari Dino <dbl>, Maserati Bora <dbl>, Volvo 142E <dbl>\r\n\r\npull out the nth string after a string split\r\npurr::map_chr(stringr::str_split(string_vec, \"pattern\"), n)\r\n\r\n\r\npurrr::map_chr(stringr::str_split(c(\"chr1\",\"chr2\",\"chr3\"), \"chr\"), 2) # you would get back c(\"1\",\"2\",\"3\")\r\n\r\n\r\n[1] \"1\" \"2\" \"3\"\r\n\r\n\r\n\r\nlibrary(kableExtra)\r\n\r\n\r\n\r\nBash\r\nConfiguration\r\n.bashrc or .zshrc\r\nBASH is a common UNIX commandline or terminal, but for MacOS the default is zsh.\r\nTo find out which shell you are using enter this command:\r\necho $0\r\nCreating your .bashrc or .zsh\r\nBash profile for login .bashrc is the common file that controls your bash set up and usually can be found at ~/.bashrc. Some systems (such as MacOS) also have a file .bash_profile. If your system uses the .bash_profile file, you can make it refer to .bashrc by having this as the contents of .bash_profile:\r\n[[ -r ~/.bashrc ]] && . ~/.bashrc\r\nIn the .bashrc file it is useful to set a customised prompt, set variables that are useful - e.g. PATH to define where bash looks for installed software - and set up some custom commands (aliases) to make common tasks easier.\r\nCustom prompt Creating your own prompt in bash can be really useful rather than having a straight $. http://ezprompt.net provides a nice way of modifying your prompt and providing the code to add to your .bashrc.\r\nThings you might want to do:\r\nadd your username\r\nadd the hostname (the name of the computer)\r\nadd the current directory\r\nadd the full path to the current directory\r\nhave colour\r\nExported variables\r\nExporting variables is a useful way for defining environmental settings. Often this is setting a bash variable to tell programs where to look for things. This website has a few examples of bash variables (https://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/).\r\nIt is useful to include the RSTUDIO_PANDOC variables below.\r\nRmarkdown Pandoc A useful one on the server, is defining where R is going to look for pandoc for compiling RMarkdown documents.\r\nI have the following in my .bashrc file\r\nexport RSTUDIO_PANDOC=/usr/lib/rstudio/bin/pandoc\r\nBut the location is likely different on your computer. In R, use the command rmarkdown::find_pandoc() to find out where the RStudio version of pandoc is located.\r\nSetting this in your `.bashrc is important because there might be another instance of pandoc that is available on your PATH and might cause issues if you run R from the commandline. RSTUDIO_PANDOC is the name that R has specified to use if you want to customise which pandoc is used.\r\nBetter bash history\r\nBash records your history as it goes but if you are operating across multiple windows it doesn’t work the way you would hope for - e.g. it is only recorded from a single given session, even if you work in multiple. PROMPT_COMMAND is a bash variable that is run as part of running commands. This particular one is designed to time and date stamp commands (not run as root) and their working directory into a daily log file. The logs live in ~/.logs/ so this needs to be made for the command to run mkdir -p ~/.logs.\r\nexport PROMPT_COMMAND='if [ \"$(id -u)\" -ne 0 ]; then echo \"$(date \"+%Y-%m-%d.%H:%M:%S\") $(pwd) $(history 1)\" >> ~/.logs/bash-history-$(date \"+%Y-%m-%d\").log; fi'\r\nIf I want to search my logs I can use grep <command> ~/.logs/* and it will tell me all the times and directories I ran a command, and how I ran it. The history in these log files is made up of all commands you run on the computer, regardless of how many terminal windows you have open.\r\nAliases\r\nIf you have commands that you’re always typing out such as ls -lrth it can be useful to create an alias for the command that is shorter and easier to type out.\r\ne.g.\r\nalias ll=\"ls -lrth\"\r\nThis can be written in your .bashrc so that you can use them in new sessions. These can be very useful but remember they are only available on machines you have been able to customise your .bashrc.\r\nPython\r\nVirtual environments - conda - conda create - conda activate - conda deactivate\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:26+12:00"
    },
    {
      "path": "workflowlanguages.html",
      "title": "Introduction to Workflow Languages",
      "description": "| An introduction to using Snakemake",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nWorkflow languagesWhat is a workflow languageRepoducible and Replicatible\r\n\r\nCommon workflow language\r\nNextFlow\r\nSnakemake\r\nExample snakemake workflow\r\n\r\n\r\nTime: 80 mins\r\nDescription: This workshop will introduce you to workflow language systems that are used for creating reproducible research workflows. This workshop will use Snakemake as the example\r\nLearning objectives\r\nUnderstand principles behind computational reproducibility\r\nUnderstand the components of a Snakefile: rules, inputs, outputs, and actions\r\nWrite a simple Snakefile\r\nRun Snakemake from the shell\r\nUse Snakemake wildcards to simplify our rules\r\nWorkflow languages\r\nWhat is a workflow language\r\nWorkflows describe the series of steps that need to be performed in order to accomplish a task. A workflow language provides a syntax for us to describe a process and how it relates to other processes.\r\nRepoducible and Replicatible\r\n\r\n\r\n\r\n\r\n\r\n\r\nReproducibility is a strong focus for research. There are varying levels of reproducibility in computational terms, and much of it can be thought of in terms relating to time or location and what differences occur in environment when then change.\r\nCan I re-run my analysis now on my computer.\r\nCan I re-run my analysis in the future on my computer?\r\nCan you re-run my analysis now on your computer?\r\nDoes my software match yours?\r\n\r\nCan you re-run my analysis in the future?\r\nHas the software changed since the last time it was run?\r\n\r\nWhat aspects of the analysis are not affected by change in environment\r\nWhat are the steps in the analysis?\r\nIs the program the same version?\r\nIs the environment the program is run in the same? (think operating system)\r\nThere are different solutions for each level or the reproducibility problem and each adds an extra level of overhead\r\nCommon workflow language\r\n\r\nThe Common Workflow Language (CWL) is a standard for describing computational data-analysis workflows. Development of CWL is focused particularly on serving the data-intensive sciences, such as Bioinformatics, Medical Imaging, Astronomy, Physics, and Chemistry. A key goal of the CWL is to allow the creation of a workflow that is portable and thus may be run reproducibly in different computational environments. https://en.wikipedia.org/wiki/Common_Workflow_Language\r\n\r\nNextFlow\r\n\r\nNextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages. https://www.nextflow.io\r\n\r\nSnakemake\r\n\r\nThe Snakemake workflow management system is a tool to create reproducible and scalable data analyses. Workflows are described via a human readable, Python based language. They can be seamlessly scaled to server, cluster, grid and cloud environments, without the need to modify the workflow definition. Finally, Snakemake workflows can entail a description of required software, which will be automatically deployed to any execution environment. https://snakemake.readthedocs.io/en/stable/\r\n\r\nExample snakemake workflow\r\nWe’ll now work through the following lessons from this workshop https://carpentries-incubator.github.io/workflows-snakemake/index.html\r\nSetup\r\nManual Data Processing workflow\r\nSnakefiles\r\nWildcards\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-05T08:34:27+12:00"
    }
  ],
  "collections": []
}

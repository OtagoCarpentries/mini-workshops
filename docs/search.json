{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\nThis site is a collection of mini workshops that are designed to be 1-4 hours in length.\n\n\n\n",
      "last_modified": "2021-06-28T21:15:10+12:00"
    },
    {
      "path": "delvingdeeper.html",
      "title": "Delving Deeper into R",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": "https://github.com/murraycadzow"
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nData structures\nStructures\nAtomics\n\nFunctions\nLoops\n\nTime: 90 minutes\nDescription: This workshop will extend your understanding of R and cover how to interact with non-data.frame structured data such as vectors, matrices and lists. We’ll also look at creating your own functions and loops.\nLearning objectives:\ndata structures\nhomogenous structures\nvectors\nmatrix\n\nheterogenous structures\nlists\ndata.frame/tibble\n\n\ncreate functions\ncreate loops\ncreating/running scripts\nData structures\nHeavy reliance on content in http://adv-r.had.co.nz/Data-structures.html\nStructures\nHomogenous: vector, matrix, array Heterogenous: list, data.frame (tibble), data.table(?)\nstr\nclass\nattr\nlength\ndim\nAtomics\nnumeric\nlogical\ncharacter\n\nFunctions\n\n\nname <- function(variables) {\n  \n}\n\n\n\nLoops\n\n\nfor (variable in vector) {\n  \n}\n\n\n\n\n\n\n",
      "last_modified": "2021-06-28T21:15:11+12:00"
    },
    {
      "path": "githubwebsites.html",
      "title": "Creating Websites with GitHub",
      "description": "Create a website using GitHub Pages.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nTime: 120 min\nDescription: This workshop will introduce you to the world of using creating simple websites using the markdown language. A it will involve a practical application of version control principles which can be applied to other code as well.\nCreating up a github account Creating a repository Introduction to markdown syntax for formatting Creating a simple webpage with markdown Modifying pages and tracking changes How to use Github for collaboration\ncreate github account\nexample template: https://academicpages.github.io\n\n\n\n",
      "last_modified": "2021-06-28T21:15:11+12:00"
    },
    {
      "path": "index.html",
      "title": "Mini-Workshops",
      "description": "A collection of mini workshops\n",
      "author": [],
      "contents": "\nThis repository contains a collection of mini workshops that are designed to be 1-4 hours in length\nWorkshop sites can be found under the workshops menu and are available for:\nDelving deeper into R\nMore Tidyverse\nUseful code snippets for everyday tasks\nCreating websites with GitHub\nWorkflow Languages\n\n\n\n",
      "last_modified": "2021-06-28T21:15:12+12:00"
    },
    {
      "path": "moretidyverse.html",
      "title": "More Tidyverse",
      "description": "Take the time to explore the lesser known functions and packages of the Tidyverse\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Matt Bixley",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nCore Tidyverse\ntibble\nggplot2\ndplyr\ntidyr\nforcats\nstringr\nreadr\npurrr\n\nExtra Tidyverse\n\nTime: 90 min\nDescription: Take the time to explore the lesser known functions and packages of the Tidyverse. Learn about how to access googlesheets, use times/dates, manipulate text, use functional programming to replace loops, and more.\nLearning objectives\nWhat packages are in the tidyverse\nUnderstand functional programming\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. - https://www.tidyverse.org\n\nhttps://rstudio-education.github.io/tidyverse-cookbook/index.html\nCore Tidyverse\n\n\nlibrary(tidyverse)\n\n\n── Attaching packages ───────────────────────────── tidyverse 1.3.1 ──\n✓ ggplot2 3.3.3     ✓ purrr   0.3.4\n✓ tibble  3.1.2     ✓ dplyr   1.0.6\n✓ tidyr   1.1.3     ✓ stringr 1.4.0\n✓ readr   1.4.0     ✓ forcats 0.5.1\n── Conflicts ──────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\ntibble\n\n\n\ntibble::tribble is a useful function if you want to manually input a small amount of data.\n\n\ntibble::tribble( ~column1, ~column2, ~column3,\n                 \"a\", 1, TRUE,\n                 \"b\", 2, FALSE)\n\n\n# A tibble: 2 x 3\n  column1 column2 column3\n  <chr>     <dbl> <lgl>  \n1 a             1 TRUE   \n2 b             2 FALSE  \n\ntibble::glimpse is similar to str but can be embedded in pipelines as it invisibly returns the original data.\n\n\ntibble::glimpse(mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\nExercise\nUse tribble() to manually input some data\nggplot2\n\n\n\nThe majority of ggplot2 functions are specific to the type of visualisation that is being created and well covered by the cheatsheet. There is one however that can be very helpful to know about.\nggplot2::theme_set allows you to apply a theme to all of your ggplots. It would usually be called near the start of a script.\n\n\n# Set the theme to theme_bw for all following plots\nggplot2::theme_set(theme_bw())\n\n\n\ndplyr\n\n\n\ndplyr::transmute is similar to dplyr::mutate except only columns specified are kept.\ndplyr::starts_with/dplyr::contains/dplyr::ends_with are useful helper functions to enable easy selection of columns.\ndplyr::relocate is a very useful function that enables you to relocate columns to specific locations. It uses a .before or .after argument to specify where you to more the column(s) to.\ndplyr::across lets you apply a function or functions across multiple columns. This is usually used in conjunction with dplyr::summarise or dplyr::mutate.\ndplyr::c_across lets you combine values from across multiple columns, such as performing a summarising function on select columns.\ndplyr::case_when is useful in situations where you would have multiple ifelses.\nExercise\ntidyr\n\n\n\ntidyr::nest\ntidyr::unnest\ntidyr::separate/tidyr::separate_rows\ntidyr::unite\ntidyr::crossing\ntidyr::drop_na\ntidyr::replace_na\nExercise\nforcats\n\n\n\nforcats::relevel\nforcats::reorder\nforcats::recode\nExercise\nUse forcats to re-order your bar plot so that it is most frequent on the left, and least on the right.\nstringr\n\n\n\nstringr::str_detect\nstringr::str_remove\nstringr::str_extract\nExercise\nreadr\n\n\n\nreadr::read_csv_chunked\nreadr::parse_number is an extremely useful function to know about if you are reading data into R that you know is numerical in nature but might contain extra characters such as units.\n\n\ntext_to_parse <- c(\" 0.4m\", \"-6\", \"a5\", \"1E-2\", \"24%\", \"3e2\")\n\nreadr::parse_number(text_to_parse)\n\n\n[1]   0.40  -6.00   5.00   0.01  24.00 300.00\n\nExercise\npurrr\n\n\n\npurrr::map\npurrr::walk\npurrr::transpose\npurrr::keep/purrr::discard/purrr::pluck\nExercise\nExtra Tidyverse\nreadxl\ngooglesheets4\nlubridate\nlubridate::ymd\n\nhms\nmagrittr\nmagrittr::%$%\nmagrittr::%T%\n\nglue\nglue::glue\n\ndtplyr\ndbplyr\n\n\n\n",
      "last_modified": "2021-06-28T21:15:16+12:00"
    },
    {
      "path": "usefulcodesnippets.html",
      "title": "Useful code snippets for everyday tasks",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nR\nRMarkdown\nWorkflow advice\n\nBash\nConfiguration\n.bashrc or .zshrc\nExported variables\nBetter bash history\n\n\nPython\n\nTime: 90 min\nDescription: This session will cover useful code snippets that are designed to improve your overall experience doing computational research. This will include how to customise your BASH and R environments, useful keyboard short cuts, and short pieces of code to do common tasks e.g. read a directory of files into R.\nR\nRMarkdown\nIn rmd the code chunk eval option takes more than just TRUE or FALSE - if you want to selectively run lines within a rmd code chunk you can exclude them explicitly:\n```{r, eval = c(-1,-3)}\n1\n\n3\n\n5 # only this line will evaluate\n```\n\n\n## 1\n\n## 3\n\n5 # only this line will evaluate\n\n\n[1] 5\n\nWorkflow advice\nhere\n\n\nlibrary(here)\n\nhere()\n\n\n\njanitor\n\n\nlibrary(janitor)\n\nclean_names()\n\n\n\nusethis\n\n\nlibrary(usethis)\n\nuse_r()\nedit_r_profile()\ncreate_project()\n\n\n\nRprojects\nRead in a directory of files\n\n\nlibrary(tidyverse)\nfiles <- list.files(pattern = \"*.csv\", full.names = TRUE)\n\nmy_csvs <- map(files, read_csv)\n\n\n\nquickly find out the number of blank entries in a column:\n\n\ntable(is.na(df$colname))\n\n\n\nreplace blank cells in a data.frame with NA:\n\n\ndata[data == \"\"] = NA\n\n\n\nformat your numbers into a fixed width (turns from numeric to character)\n# returns character type of number rounded to 3 decimal places\nsprintf('%.3f', 0.123456) \nformat all numeric columns to 3 decimal places and make into a table\n\n\nlibrary(tidyverse)\n mtcars %>% mutate(across(where(is.numeric), list(~sprintf('%.3f', .) ) )) %>% kableExtra::kbl()\n\n\n\n\n\nmpg\n\n\ncyl\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\nam\n\n\ngear\n\n\ncarb\n\n\nmpg_1\n\n\ncyl_1\n\n\ndisp_1\n\n\nhp_1\n\n\ndrat_1\n\n\nwt_1\n\n\nqsec_1\n\n\nvs_1\n\n\nam_1\n\n\ngear_1\n\n\ncarb_1\n\n\nMazda RX4\n\n\n21.0\n\n\n6\n\n\n160.0\n\n\n110\n\n\n3.90\n\n\n2.620\n\n\n16.46\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\n21.000\n\n\n6.000\n\n\n160.000\n\n\n110.000\n\n\n3.900\n\n\n2.620\n\n\n16.460\n\n\n0.000\n\n\n1.000\n\n\n4.000\n\n\n4.000\n\n\nMazda RX4 Wag\n\n\n21.0\n\n\n6\n\n\n160.0\n\n\n110\n\n\n3.90\n\n\n2.875\n\n\n17.02\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\n21.000\n\n\n6.000\n\n\n160.000\n\n\n110.000\n\n\n3.900\n\n\n2.875\n\n\n17.020\n\n\n0.000\n\n\n1.000\n\n\n4.000\n\n\n4.000\n\n\nDatsun 710\n\n\n22.8\n\n\n4\n\n\n108.0\n\n\n93\n\n\n3.85\n\n\n2.320\n\n\n18.61\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n22.800\n\n\n4.000\n\n\n108.000\n\n\n93.000\n\n\n3.850\n\n\n2.320\n\n\n18.610\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nHornet 4 Drive\n\n\n21.4\n\n\n6\n\n\n258.0\n\n\n110\n\n\n3.08\n\n\n3.215\n\n\n19.44\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n21.400\n\n\n6.000\n\n\n258.000\n\n\n110.000\n\n\n3.080\n\n\n3.215\n\n\n19.440\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nHornet Sportabout\n\n\n18.7\n\n\n8\n\n\n360.0\n\n\n175\n\n\n3.15\n\n\n3.440\n\n\n17.02\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n18.700\n\n\n8.000\n\n\n360.000\n\n\n175.000\n\n\n3.150\n\n\n3.440\n\n\n17.020\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nValiant\n\n\n18.1\n\n\n6\n\n\n225.0\n\n\n105\n\n\n2.76\n\n\n3.460\n\n\n20.22\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n18.100\n\n\n6.000\n\n\n225.000\n\n\n105.000\n\n\n2.760\n\n\n3.460\n\n\n20.220\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nDuster 360\n\n\n14.3\n\n\n8\n\n\n360.0\n\n\n245\n\n\n3.21\n\n\n3.570\n\n\n15.84\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n14.300\n\n\n8.000\n\n\n360.000\n\n\n245.000\n\n\n3.210\n\n\n3.570\n\n\n15.840\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nMerc 240D\n\n\n24.4\n\n\n4\n\n\n146.7\n\n\n62\n\n\n3.69\n\n\n3.190\n\n\n20.00\n\n\n1\n\n\n0\n\n\n4\n\n\n2\n\n\n24.400\n\n\n4.000\n\n\n146.700\n\n\n62.000\n\n\n3.690\n\n\n3.190\n\n\n20.000\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n2.000\n\n\nMerc 230\n\n\n22.8\n\n\n4\n\n\n140.8\n\n\n95\n\n\n3.92\n\n\n3.150\n\n\n22.90\n\n\n1\n\n\n0\n\n\n4\n\n\n2\n\n\n22.800\n\n\n4.000\n\n\n140.800\n\n\n95.000\n\n\n3.920\n\n\n3.150\n\n\n22.900\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n2.000\n\n\nMerc 280\n\n\n19.2\n\n\n6\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.30\n\n\n1\n\n\n0\n\n\n4\n\n\n4\n\n\n19.200\n\n\n6.000\n\n\n167.600\n\n\n123.000\n\n\n3.920\n\n\n3.440\n\n\n18.300\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n4.000\n\n\nMerc 280C\n\n\n17.8\n\n\n6\n\n\n167.6\n\n\n123\n\n\n3.92\n\n\n3.440\n\n\n18.90\n\n\n1\n\n\n0\n\n\n4\n\n\n4\n\n\n17.800\n\n\n6.000\n\n\n167.600\n\n\n123.000\n\n\n3.920\n\n\n3.440\n\n\n18.900\n\n\n1.000\n\n\n0.000\n\n\n4.000\n\n\n4.000\n\n\nMerc 450SE\n\n\n16.4\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n4.070\n\n\n17.40\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n16.400\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n4.070\n\n\n17.400\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nMerc 450SL\n\n\n17.3\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.730\n\n\n17.60\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n17.300\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n3.730\n\n\n17.600\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nMerc 450SLC\n\n\n15.2\n\n\n8\n\n\n275.8\n\n\n180\n\n\n3.07\n\n\n3.780\n\n\n18.00\n\n\n0\n\n\n0\n\n\n3\n\n\n3\n\n\n15.200\n\n\n8.000\n\n\n275.800\n\n\n180.000\n\n\n3.070\n\n\n3.780\n\n\n18.000\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n3.000\n\n\nCadillac Fleetwood\n\n\n10.4\n\n\n8\n\n\n472.0\n\n\n205\n\n\n2.93\n\n\n5.250\n\n\n17.98\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n10.400\n\n\n8.000\n\n\n472.000\n\n\n205.000\n\n\n2.930\n\n\n5.250\n\n\n17.980\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nLincoln Continental\n\n\n10.4\n\n\n8\n\n\n460.0\n\n\n215\n\n\n3.00\n\n\n5.424\n\n\n17.82\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n10.400\n\n\n8.000\n\n\n460.000\n\n\n215.000\n\n\n3.000\n\n\n5.424\n\n\n17.820\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nChrysler Imperial\n\n\n14.7\n\n\n8\n\n\n440.0\n\n\n230\n\n\n3.23\n\n\n5.345\n\n\n17.42\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n14.700\n\n\n8.000\n\n\n440.000\n\n\n230.000\n\n\n3.230\n\n\n5.345\n\n\n17.420\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nFiat 128\n\n\n32.4\n\n\n4\n\n\n78.7\n\n\n66\n\n\n4.08\n\n\n2.200\n\n\n19.47\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n32.400\n\n\n4.000\n\n\n78.700\n\n\n66.000\n\n\n4.080\n\n\n2.200\n\n\n19.470\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nHonda Civic\n\n\n30.4\n\n\n4\n\n\n75.7\n\n\n52\n\n\n4.93\n\n\n1.615\n\n\n18.52\n\n\n1\n\n\n1\n\n\n4\n\n\n2\n\n\n30.400\n\n\n4.000\n\n\n75.700\n\n\n52.000\n\n\n4.930\n\n\n1.615\n\n\n18.520\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n2.000\n\n\nToyota Corolla\n\n\n33.9\n\n\n4\n\n\n71.1\n\n\n65\n\n\n4.22\n\n\n1.835\n\n\n19.90\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n33.900\n\n\n4.000\n\n\n71.100\n\n\n65.000\n\n\n4.220\n\n\n1.835\n\n\n19.900\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nToyota Corona\n\n\n21.5\n\n\n4\n\n\n120.1\n\n\n97\n\n\n3.70\n\n\n2.465\n\n\n20.01\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\n21.500\n\n\n4.000\n\n\n120.100\n\n\n97.000\n\n\n3.700\n\n\n2.465\n\n\n20.010\n\n\n1.000\n\n\n0.000\n\n\n3.000\n\n\n1.000\n\n\nDodge Challenger\n\n\n15.5\n\n\n8\n\n\n318.0\n\n\n150\n\n\n2.76\n\n\n3.520\n\n\n16.87\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n15.500\n\n\n8.000\n\n\n318.000\n\n\n150.000\n\n\n2.760\n\n\n3.520\n\n\n16.870\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nAMC Javelin\n\n\n15.2\n\n\n8\n\n\n304.0\n\n\n150\n\n\n3.15\n\n\n3.435\n\n\n17.30\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n15.200\n\n\n8.000\n\n\n304.000\n\n\n150.000\n\n\n3.150\n\n\n3.435\n\n\n17.300\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nCamaro Z28\n\n\n13.3\n\n\n8\n\n\n350.0\n\n\n245\n\n\n3.73\n\n\n3.840\n\n\n15.41\n\n\n0\n\n\n0\n\n\n3\n\n\n4\n\n\n13.300\n\n\n8.000\n\n\n350.000\n\n\n245.000\n\n\n3.730\n\n\n3.840\n\n\n15.410\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n4.000\n\n\nPontiac Firebird\n\n\n19.2\n\n\n8\n\n\n400.0\n\n\n175\n\n\n3.08\n\n\n3.845\n\n\n17.05\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\n19.200\n\n\n8.000\n\n\n400.000\n\n\n175.000\n\n\n3.080\n\n\n3.845\n\n\n17.050\n\n\n0.000\n\n\n0.000\n\n\n3.000\n\n\n2.000\n\n\nFiat X1-9\n\n\n27.3\n\n\n4\n\n\n79.0\n\n\n66\n\n\n4.08\n\n\n1.935\n\n\n18.90\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\n27.300\n\n\n4.000\n\n\n79.000\n\n\n66.000\n\n\n4.080\n\n\n1.935\n\n\n18.900\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n1.000\n\n\nPorsche 914-2\n\n\n26.0\n\n\n4\n\n\n120.3\n\n\n91\n\n\n4.43\n\n\n2.140\n\n\n16.70\n\n\n0\n\n\n1\n\n\n5\n\n\n2\n\n\n26.000\n\n\n4.000\n\n\n120.300\n\n\n91.000\n\n\n4.430\n\n\n2.140\n\n\n16.700\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n2.000\n\n\nLotus Europa\n\n\n30.4\n\n\n4\n\n\n95.1\n\n\n113\n\n\n3.77\n\n\n1.513\n\n\n16.90\n\n\n1\n\n\n1\n\n\n5\n\n\n2\n\n\n30.400\n\n\n4.000\n\n\n95.100\n\n\n113.000\n\n\n3.770\n\n\n1.513\n\n\n16.900\n\n\n1.000\n\n\n1.000\n\n\n5.000\n\n\n2.000\n\n\nFord Pantera L\n\n\n15.8\n\n\n8\n\n\n351.0\n\n\n264\n\n\n4.22\n\n\n3.170\n\n\n14.50\n\n\n0\n\n\n1\n\n\n5\n\n\n4\n\n\n15.800\n\n\n8.000\n\n\n351.000\n\n\n264.000\n\n\n4.220\n\n\n3.170\n\n\n14.500\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n4.000\n\n\nFerrari Dino\n\n\n19.7\n\n\n6\n\n\n145.0\n\n\n175\n\n\n3.62\n\n\n2.770\n\n\n15.50\n\n\n0\n\n\n1\n\n\n5\n\n\n6\n\n\n19.700\n\n\n6.000\n\n\n145.000\n\n\n175.000\n\n\n3.620\n\n\n2.770\n\n\n15.500\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n6.000\n\n\nMaserati Bora\n\n\n15.0\n\n\n8\n\n\n301.0\n\n\n335\n\n\n3.54\n\n\n3.570\n\n\n14.60\n\n\n0\n\n\n1\n\n\n5\n\n\n8\n\n\n15.000\n\n\n8.000\n\n\n301.000\n\n\n335.000\n\n\n3.540\n\n\n3.570\n\n\n14.600\n\n\n0.000\n\n\n1.000\n\n\n5.000\n\n\n8.000\n\n\nVolvo 142E\n\n\n21.4\n\n\n4\n\n\n121.0\n\n\n109\n\n\n4.11\n\n\n2.780\n\n\n18.60\n\n\n1\n\n\n1\n\n\n4\n\n\n2\n\n\n21.400\n\n\n4.000\n\n\n121.000\n\n\n109.000\n\n\n4.110\n\n\n2.780\n\n\n18.600\n\n\n1.000\n\n\n1.000\n\n\n4.000\n\n\n2.000\n\n\ntidy way to transpose a dataframe/tibble\n\n\nmtcars %>%\n  tibble::rownames_to_column() %>% # may or may not be needed\n  tidyr::pivot_longer(-rowname, names_to = \"var\", values_to = \"value\") %>% \n  tidyr::pivot_wider(names_from = \"rowname\", values_from = \"value\")\n\n\n# A tibble: 11 x 33\n   var   `Mazda RX4` `Mazda RX4 Wag` `Datsun 710` `Hornet 4 Drive`\n   <chr>       <dbl>           <dbl>        <dbl>            <dbl>\n 1 mpg         21              21           22.8             21.4 \n 2 cyl          6               6            4                6   \n 3 disp       160             160          108              258   \n 4 hp         110             110           93              110   \n 5 drat         3.9             3.9          3.85             3.08\n 6 wt           2.62            2.88         2.32             3.22\n 7 qsec        16.5            17.0         18.6             19.4 \n 8 vs           0               0            1                1   \n 9 am           1               1            1                0   \n10 gear         4               4            4                3   \n11 carb         4               4            1                1   \n# … with 28 more variables: Hornet Sportabout <dbl>, Valiant <dbl>,\n#   Duster 360 <dbl>, Merc 240D <dbl>, Merc 230 <dbl>,\n#   Merc 280 <dbl>, Merc 280C <dbl>, Merc 450SE <dbl>,\n#   Merc 450SL <dbl>, Merc 450SLC <dbl>, Cadillac Fleetwood <dbl>,\n#   Lincoln Continental <dbl>, Chrysler Imperial <dbl>,\n#   Fiat 128 <dbl>, Honda Civic <dbl>, Toyota Corolla <dbl>,\n#   Toyota Corona <dbl>, Dodge Challenger <dbl>, AMC Javelin <dbl>,\n#   Camaro Z28 <dbl>, Pontiac Firebird <dbl>, Fiat X1-9 <dbl>,\n#   Porsche 914-2 <dbl>, Lotus Europa <dbl>, Ford Pantera L <dbl>,\n#   Ferrari Dino <dbl>, Maserati Bora <dbl>, Volvo 142E <dbl>\n\npull out the nth string after a string split\npurr::map_chr(stringr::str_split(string_vec, \"pattern\"), n)\n\n\npurrr::map_chr(stringr::str_split(c(\"chr1\",\"chr2\",\"chr3\"), \"chr\"), 2) # you would get back c(\"1\",\"2\",\"3\")\n\n\n[1] \"1\" \"2\" \"3\"\n\nBash\nConfiguration\n.bashrc or .zshrc\nBASH is a common UNIX commandline or terminal, but for MacOS the default is zsh.\nTo find out which shell you are using enter this command:\necho $0\nCreating your .bashrc or .zsh\nBash profile for login .bashrc is the common file that controls your bash set up and usually can be found at ~/.bashrc. Some systems (such as MacOS) also have a file .bash_profile. If your system uses the .bash_profile file, you can make it refer to .bashrc by having this as the contents of .bash_profile:\n[[ -r ~/.bashrc ]] && . ~/.bashrc\nIn the .bashrc file it is useful to set a customised prompt, set variables that are useful - e.g. PATH to define where bash looks for installed software - and set up some custom commands (aliases) to make common tasks easier.\nCustom prompt Creating your own prompt in bash can be really useful rather than having a straight $. http://ezprompt.net provides a nice way of modifying your prompt and providing the code to add to your .bashrc.\nThings you might want to do:\nadd your username\nadd the hostname (the name of the computer)\nadd the current directory\nadd the full path to the current directory\nhave colour\nExported variables\nExporting variables is a useful way for defining environmental settings. Often this is setting a bash variable to tell programs where to look for things. This website has a few examples of bash variables (https://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/).\nIt is useful to include the RSTUDIO_PANDOC variables below.\nRmarkdown Pandoc A useful one on the server, is defining where R is going to look for pandoc for compiling RMarkdown documents.\nI have the following in my .bashrc file\nexport RSTUDIO_PANDOC=/usr/lib/rstudio/bin/pandoc\nBut the location is likely different on your computer. In R, use the command rmarkdown::find_pandoc() to find out where the RStudio version of pandoc is located.\nSetting this in your `.bashrc is important because there might be another instance of pandoc that is available on your PATH and might cause issues if you run R from the commandline. RSTUDIO_PANDOC is the name that R has specified to use if you want to customise which pandoc is used.\nBetter bash history\nBash records your history as it goes but if you are operating across multiple windows it doesn’t work the way you would hope for - e.g. it is only recorded from a single given session, even if you work in multiple. PROMPT_COMMAND is a bash variable that is run as part of running commands. This particular one is designed to time and date stamp commands (not run as root) and their working directory into a daily log file. The logs live in ~/.logs/ so this needs to be made for the command to run mkdir -p ~/.logs.\nexport PROMPT_COMMAND='if [ \"$(id -u)\" -ne 0 ]; then echo \"$(date \"+%Y-%m-%d.%H:%M:%S\") $(pwd) $(history 1)\" >> ~/.logs/bash-history-$(date \"+%Y-%m-%d\").log; fi'\nIf I want to search my logs I can use grep <command> ~/.logs/* and it will tell me all the times and directories I ran a command, and how I ran it. The history in these log files is made up of all commands you run on the computer, regardless of how many terminal windows you have open.\nAliases\nIf you have commands that you’re always typing out such as ls -lrth it can be useful to create an alias for the command that is shorter and easier to type out.\ne.g.\nalias ll=\"ls -lrth\"\nThis can be written in your .bashrc so that you can use them in new sessions. These can be very useful but remember they are only available on machines you have been able to customise your .bashrc.\nPython\nVirtual environments - conda - conda create - conda activate - conda deactivate\n\n\n\n",
      "last_modified": "2021-06-28T21:15:22+12:00"
    },
    {
      "path": "workflowlanguages.html",
      "title": "Introduction to Workflow Languages",
      "description": "| An introduction to using Snakemake",
      "author": [
        {
          "name": "Murray Cadzow",
          "url": {}
        },
        {
          "name": "Hugh Cross",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nWorkflow languages\nWhat is a workflow language\nRepoducible and Replicatible\n\nCommon workflow language\nNextFlow\nSnakemake\nExample snakemake workflow\n\n\nTime: 80 mins\nDescription: This workshop will introduce you to workflow language systems that are used for creating reproducible research workflows. This workshop will use Snakemake as the example\nLearning objectives\nUnderstand principles behind computational reproducibility\nUnderstand the components of a Snakefile: rules, inputs, outputs, and actions\nWrite a simple Snakefile\nRun Snakemake from the shell\nUse Snakemake wildcards to simplify our rules\nWorkflow languages\nWhat is a workflow language\nWorkflows describe the series of steps that need to be performed in order to accomplish a task. A workflow language provides a syntax for us to describe a process and how it relates to other processes.\nRepoducible and Replicatible\n\n\n\n\n\n\nReproducibility is a strong focus for research. There are varying levels of reproducibility in computational terms, and much of it can be thought of in terms relating to time or location and what differences occur in environment when then change.\nCan I re-run my analysis now on my computer.\nCan I re-run my analysis in the future on my computer?\nCan you re-run my analysis now on your computer?\nDoes my software match yours?\n\nCan you re-run my analysis in the future?\nHas the software changed since the last time it was run?\n\nWhat aspects of the analysis are not affected by change in environment\nWhat are the steps in the analysis?\nIs the program the same version?\nIs the environment the program is run in the same? (think operating system)\nThere are different solutions for each level or the reproducibility problem and each adds an extra level of overhead\nCommon workflow language\n\nThe Common Workflow Language (CWL) is a standard for describing computational data-analysis workflows. Development of CWL is focused particularly on serving the data-intensive sciences, such as Bioinformatics, Medical Imaging, Astronomy, Physics, and Chemistry. A key goal of the CWL is to allow the creation of a workflow that is portable and thus may be run reproducibly in different computational environments. https://en.wikipedia.org/wiki/Common_Workflow_Language\n\nNextFlow\n\nNextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages. https://www.nextflow.io\n\nSnakemake\n\nThe Snakemake workflow management system is a tool to create reproducible and scalable data analyses. Workflows are described via a human readable, Python based language. They can be seamlessly scaled to server, cluster, grid and cloud environments, without the need to modify the workflow definition. Finally, Snakemake workflows can entail a description of required software, which will be automatically deployed to any execution environment. https://snakemake.readthedocs.io/en/stable/\n\nExample snakemake workflow\nWe’ll now work through the following lessons from this workshop https://carpentries-incubator.github.io/workflows-snakemake/index.html\nSetup\nManual Data Processing workflow\nSnakefiles\nWildcards\n\n\n\n",
      "last_modified": "2021-06-28T21:15:22+12:00"
    }
  ],
  "collections": []
}
